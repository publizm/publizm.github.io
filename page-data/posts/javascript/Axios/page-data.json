{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript/Axios","webpackCompilationHash":"728483b431b2d65eb2d6","result":{"data":{"markdownRemark":{"id":"e7167140-0ca0-5396-83af-e736d9c1790b","html":"<span class=\"notice\">\n  <em>TIL 내용이므로 잘못된 내용은 댓글 부탁드립니다</em>\n</span>\n<div id=\"toc\">\n<p><strong><img class=\"emoji-icon\" alt=\"emoji-link\" data-icon=\"emoji-link\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAAYagMeiWXwAAAAJiS0dEAP+Hj8y/AAAAB3RJTUUH4QsFFwYZepoZFwAAA21JREFUOMt1lFtsFHUUxr//zHYue213obFbamutloDaxSigISQYkFrjNSSI9EJ9IWqjkZhoUkVJGhdZO5pGm9IK4QHhQTRIFXwgxqSaWLykamAV02btZaft7navc9vZmb8PKFa6nofz9Ptycr5zIfif+BMcE23Q79SrkSK/uqYqrG0AAFIePw3ep+zXus0Ghrd1Msmfcn5oJ/YCYMvhI6D+uJQ84PCsvhwcZ5Xc2uSDmbqFse1qrJxgGLxflvL7hDn60uLBn04rn9hXrZbMFi0T/uaJlYIhiP64pHSJ00s9b34saietonbil8Y0adNr15+z8+yNOOeXJbVLiC319H++EV8DmEEb0jK3E7ep5+1px3L8AH5zed+2O2HGT23+jpJJ2gQAsJDPBVI8V3QRMP/i3VA8xsu5do1ccTDPpT478cyE5yQAIIjbA0ItDGNJw/UKR+D2/xgpdhB2Pto40xxU75ltYdaZhw7leDxJhnYb67TvlamKf5o+Cr9/VprdR1l7IbnbN2B9as1bGzP3a7Gqic3kq6eNPoFR+x79NnpNMASnPy7lOpUMZUjeGMwlErlL46JFHtIC8qj+eP490YfIlUG5dBYscBS8X5aULn460cs2CHXiRdekAxzNyuzDtH5BIK9UViISC9foxwGwryLjVvr1bnEm2zNyJtTs2Sr4GsYc+QJMq+Ixuja2Kci7I1fDbm0QAMDuRK7D6OXns89Lox3UlKu3iluE9bcWmpj4XfxeszJZcr9DDkMb/tsc0u7lzwrb1BePD2yCFxfJC631b7EtRWM6nRQCVXJ+or82UlTHr5vv0OuZptKc/EUbLgF4hA58+Vqsrt16AKEaQVAWe6eGsmZq2XAZw22LlsKo1/wdBSiNzh0sfOS1q4pEmh/e9R8cYEqLWOIDN928Cs8CAD7ABsb7lPm64LAik4ebjTM3LCdbqa4Oee4TmTvGbP0cNuBu5uc96Xd5H41MhH3qsRXLz263SvlAq/NeUt+YShDhluj+xBucl0b+CAfUkTLHRXYhyu7oXNPH1tAskyJeexVbUPp/P+LW3i97vAQcOMHduiO0Z03I6TFNOf7DhfMXVB0ENiyYMKBDhYYiTNiwCTg44YLI+5qrg540vawUTDAgoLBRQhE6VChQoMGEBZss+x0UAFnxR+iyDOAv/Ud+TW3GONMAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTctMTEtMDVUMTg6NDk6NTArMDA6MDAUXGOwAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDE3LTExLTA1VDEzOjUzOjQ4KzAwOjAwqyFlXwAAAABJRU5ErkJggg==\" title=\"emoji-link\">  Table Of Contents</strong></p>\n<ul>\n<li>\n<p><a href=\"#axios%EB%9E%80\">Axios란?</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95\">설치 및 사용법</a></p>\n<ul>\n<li><a href=\"#%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">설치하는 방법</a></li>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\">사용방법</a></li>\n<li>\n<p><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C\">메소드</a></p>\n<ul>\n<li><a href=\"#axiosgeturl-config\">axios.get(url[, config])</a></li>\n<li><a href=\"#axiosposturl-data-config\">axios.post(url[, data[, config]])</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"axios란\"><a href=\"#axios%EB%9E%80\" aria-label=\"axios란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Axios란?</h2>\n<p>HTTP 통신을 하는데 유용한 Javascript 라이브러리이며, 주로 async/await과 함께 사용한다<br>\naxios는 브라우저와 Node.js 환경에서 모두 사용할 수 있다<br>\naxios는 Promise 기반의 API이다.</p>\n<h3 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>하위 브라우저 호환</li>\n<li>직접 XMLHttpRequest를 다룰 필요없이 요청할 수 있다.</li>\n<li>요청을 중단시킬 수 있다.</li>\n<li>응답 시간 초과를 설정하는 방법이 있다.</li>\n<li>JSON 데이터 자동변환(Fetch에서는 변환을 따로 해줬어야하는 불편함이 있었다)</li>\n</ul>\n<h2 id=\"설치-및-사용법\"><a href=\"#%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"설치 및 사용법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치 및 사용법</h2>\n<h3 id=\"설치하는-방법\"><a href=\"#%EC%84%A4%EC%B9%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"설치하는 방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치하는 방법</h3>\n<p>npm으로 설치하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios</code></pre></div>\n<p>yarn으로 설치하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> axios</code></pre></div>\n<p>CDN으로 로드하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<hr class=\"sub\" />\n<h3 id=\"사용방법\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"사용방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용방법</h3>\n<p>우선 axios는 아래와 같이 간단하게 HTTP요청을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">'...'</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'...'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 처럼 옵션에 method와 url, data들을 정의해서 사용할 수 있고,<br>\n메소드를 분리하여 사용할 수 있다</p>\n<hr class=\"sub\">\n<h3 id=\"메소드\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"메소드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드</h3>\n<p>메소드의 종류에는 여러가지가 있는데 주로 사용하는 것들만 설명하고,<br>\n자세한 정보는 <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios 문서</a>에서 확인할 수 있다.</p>\n<br>\n<h4 id=\"axiosgeturl-config\"><a href=\"#axiosgeturl-config\" aria-label=\"axiosgeturl config permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>axios.get(url[, config])</h4>\n<p>get요청은 특정 url에 있는 데이터를 요청하는 것이다.</p>\n<p>async/await을 사용하여 데이터를 받아 후속처리하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>asyns/await을 사용하지 않는다면 then으로 후속처리 메소드를 작성해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> data <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 promise를 받아서 변수에 담아서 활용할 수 있다.</p>\n<p>그리고 또 get 요청시 매개변수를 추가할 수 있다.</p>\n<p>해당 요청을 보낼 예시 url은</p>\n<div class=\"gatsby-highlight\" data-language=\"code\"><pre class=\"language-code\"><code class=\"language-code\">https://www.axiostest.com/?member=publee</code></pre></div>\n<p>이제 요청을 보내보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.axiostest.com/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    member<span class=\"token punctuation\">:</span> <span class=\"token string\">'publee'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드는 뭔가 재사용이 어려워보이니 변수에 담아 매개변수에 넣어 사용해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  member<span class=\"token punctuation\">:</span> <span class=\"token string\">'publee'</span>\n<span class=\"token punctuation\">}</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.axiostest.com/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr />\n<h4 id=\"axiosposturl-data-config\"><a href=\"#axiosposturl-data-config\" aria-label=\"axiosposturl data config permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>axios.post(url[, data[, config]])</h4>\n<p>post를 사용할때는 payload가 매개변수에 담겨야된다.</p>\n<p>사용법은 payload를 제외하고는 get과 사용법이 같다.</p>\n<p>async/await을 사용하여 데이터를 받아 후속처리하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>asyns/await을 사용하지 않는다면 then으로 후속처리 메소드를 작성해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addData</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">content</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> data <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<p>왠만하면 axios를 사용할때 try/catch를 사용하여 후속처리를 해주는 것이 좋을것 같다.<br>\n이유는 try/catch try안에서 오류가 나면 오류를 건너뛰고 다음 코드의 순서가 보장이 되는데</p>\n<p><strong>try/catch가 없을 경우 에러가 나면 그 코드에서 중지되므로 try/catch를 사용해주는 것이 좋다.</strong><br>\n하나의 try 안에서 비동기 처리가 몇개가 존재한다면 에러가 나면 catch문으로 넘어가 다음 코드를 실행하지 않으므로, 중요한 비동기 작업이라면 비동기 코드 단위별로 try/catch 사용해주는 것이 좋다.</p>\n<br>\n<br>\n<br>\n<br>","fields":{"slug":"/posts/javascript/Axios","tagSlugs":["/tag/axios/"]},"frontmatter":{"date":"2019-12-12","description":"axios에 대해 알아보자","tags":["Axios"],"title":"axios","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript/Axios"}}}