{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript/TypeCasting","webpackCompilationHash":"d26bc804d01074707ee8","result":{"data":{"markdownRemark":{"id":"07232fe5-e7d0-5363-92b1-6b66181c69b1","html":"<span class=\"notice\">\n  <em>TIL 이므로 잘못된 내용은 댓글 부탁드립니다</em>\n</span>\n<div id=\"toc\">\n<p><strong><img class=\"emoji-icon\" alt=\"emoji-link\" data-icon=\"emoji-link\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAAYagMeiWXwAAAAJiS0dEAP+Hj8y/AAAAB3RJTUUH4QsFFwYZepoZFwAAA21JREFUOMt1lFtsFHUUxr//zHYue213obFbamutloDaxSigISQYkFrjNSSI9EJ9IWqjkZhoUkVJGhdZO5pGm9IK4QHhQTRIFXwgxqSaWLykamAV02btZaft7navc9vZmb8PKFa6nofz9Ptycr5zIfif+BMcE23Q79SrkSK/uqYqrG0AAFIePw3ep+zXus0Ghrd1Msmfcn5oJ/YCYMvhI6D+uJQ84PCsvhwcZ5Xc2uSDmbqFse1qrJxgGLxflvL7hDn60uLBn04rn9hXrZbMFi0T/uaJlYIhiP64pHSJ00s9b34saietonbil8Y0adNr15+z8+yNOOeXJbVLiC319H++EV8DmEEb0jK3E7ep5+1px3L8AH5zed+2O2HGT23+jpJJ2gQAsJDPBVI8V3QRMP/i3VA8xsu5do1ccTDPpT478cyE5yQAIIjbA0ItDGNJw/UKR+D2/xgpdhB2Pto40xxU75ltYdaZhw7leDxJhnYb67TvlamKf5o+Cr9/VprdR1l7IbnbN2B9as1bGzP3a7Gqic3kq6eNPoFR+x79NnpNMASnPy7lOpUMZUjeGMwlErlL46JFHtIC8qj+eP490YfIlUG5dBYscBS8X5aULn460cs2CHXiRdekAxzNyuzDtH5BIK9UViISC9foxwGwryLjVvr1bnEm2zNyJtTs2Sr4GsYc+QJMq+Ixuja2Kci7I1fDbm0QAMDuRK7D6OXns89Lox3UlKu3iluE9bcWmpj4XfxeszJZcr9DDkMb/tsc0u7lzwrb1BePD2yCFxfJC631b7EtRWM6nRQCVXJ+or82UlTHr5vv0OuZptKc/EUbLgF4hA58+Vqsrt16AKEaQVAWe6eGsmZq2XAZw22LlsKo1/wdBSiNzh0sfOS1q4pEmh/e9R8cYEqLWOIDN928Cs8CAD7ABsb7lPm64LAik4ebjTM3LCdbqa4Oee4TmTvGbP0cNuBu5uc96Xd5H41MhH3qsRXLz263SvlAq/NeUt+YShDhluj+xBucl0b+CAfUkTLHRXYhyu7oXNPH1tAskyJeexVbUPp/P+LW3i97vAQcOMHduiO0Z03I6TFNOf7DhfMXVB0ENiyYMKBDhYYiTNiwCTg44YLI+5qrg540vawUTDAgoLBRQhE6VChQoMGEBZss+x0UAFnxR+iyDOAv/Ud+TW3GONMAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTctMTEtMDVUMTg6NDk6NTArMDA6MDAUXGOwAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDE3LTExLTA1VDEzOjUzOjQ4KzAwOjAwqyFlXwAAAABJRU5ErkJggg==\" title=\"emoji-link\">  Table Of Contents</strong></p>\n<ul>\n<li><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98%EC%9D%B4%EB%9E%80\">타입 변환이란?</a></li>\n<li>\n<p><a href=\"#%EC%95%94%EB%AC%B5%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98\">암묵적 타입 변환</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\">문자열 타입으로 변환</a></p>\n<ul>\n<li><a href=\"#es6%EC%97%90-%EB%8F%84%EC%9E%85%EB%90%9C-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A6%AC%ED%84%B0%EB%9F%B4\">ES6에 도입된 템플릿 리터럴</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\">숫자 타입으로 변환</a></p>\n<ul>\n<li><a href=\"#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\">산술 연산자</a></li>\n<li><a href=\"#%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90\">비교 연산자</a></li>\n<li><a href=\"#%EB%8B%A8%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90\">+단항 연산자</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\">불리언 타입으로 변환</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98\">명시적 타입 변환</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98-1\">문자열 타입으로 변환</a></li>\n<li><a href=\"#%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98-1\">숫자 타입으로 변환</a></li>\n<li><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98-1\">불리언 타입으로 변환</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%8B%A8%EC%B6%95-%ED%8F%89%EA%B0%80%E2%98%85\">단축 평가★</a></li>\n</ul>\n</div>\n<h2 id=\"타입-변환이란\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98%EC%9D%B4%EB%9E%80\" aria-label=\"타입 변환이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 변환이란?</h2>\n<p>자바스크립트의 모든 값은 타입이 있다.<br>\n값의 타입은 개발자의 의도에 의해 다른 타입으로 변환할 수 있다. 개발자가 의도적으로 값의 타입을 변환하는 것을 <strong>명시적 타입 변환(Explicit coercion) 또는 타입 캐스팅(Type casting)</strong> 이라 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 명시적 타입 변환</span>\n<span class=\"token comment\">// 숫자를 문자열로 타입 캐스팅한다.</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string, 10</span>\n\n<span class=\"token comment\">// 변수 num의 값이 변경된 것은 아니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number, 10</span></code></pre></div>\n<p><strong>동적 타입 언어인 자바스크립트는 개발자의 의도와는 상관 없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되기도 한다.</strong> <br>\n이를 <strong>암묵적 타입 변환(Implicit coercion) 또는 타입 강제 변환(Type coercion)</strong> 이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 암묵적 타입 변환</span>\n<span class=\"token comment\">// 문자열 연결 연산자는 숫자 타입 num의 값을 바탕으로 새로운 문자열을 생성한다.</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// string, 10</span>\n\n<span class=\"token comment\">// 변수 num의 값이 변경된 것은 아니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number, 10</span></code></pre></div>\n<p>명시적 타입 변환과 암묵적 타입 변환 모두 기존 값을 직접 변경하는 것은 아니다.<br>\n변수의 값이 원시 타입(숫자,문자열, boolean, undefined, null, symbol)의 값인 경우, 변수 값을 변경하려면 재할당 이외에는 변경할 방법이 없다.\n<br>\n<br></p>\n<h2 id=\"암묵적-타입-변환\"><a href=\"#%EC%95%94%EB%AC%B5%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98\" aria-label=\"암묵적 타입 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>암묵적 타입 변환</h2>\n<p>자바스크립트 엔진은 표현식을 평가할 때 코드의 문맥을 고려하여 암묵적 타입 변환을 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 피연산자가 모두 문자열 타입이여야 하는 문맥</span>\n<span class=\"token string\">'10'</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\">// '102'</span>\n\n<span class=\"token comment\">// 피연산자가 모두 숫자 타입이여야하는 문맥</span>\n<span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token string\">'10'</span> <span class=\"token comment\">// 50</span>\n\n<span class=\"token comment\">// 피연산자 또는 표현식이 불리언 타입이여야하는 문맥</span>\n<span class=\"token operator\">!</span><span class=\"token number\">0</span> <span class=\"token comment\">// true , 0 은 falsy적 성향이 강하다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 실행</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바스크립트 엔진은 표현식을 평가할 때 코드의 문맥에 부합하지 않는 다양한 상황이 발생했을때 가급적 에러를 발생시키지 않도록 암묵적 타입 변환을 통해 표현식을 평가한다.</p>\n<blockquote>\n<p>암묵적 타입 변환이 발생하면 문자열, 숫자, 불리언과 같은 원시 타입 중 하나로 타입을 자동 변환한다.</p>\n</blockquote>\n<br>\n<p><em>타입별로 암묵적 타입 변환이 어떻게 되는지 알아보자.</em></p>\n<br>\n<h3 id=\"문자열-타입으로-변환\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"문자열 타입으로 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 타입으로 변환</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span> <span class=\"token comment\">// '12'</span></code></pre></div>\n<p><strong>+ 연산자</strong>는 피연산자 중 <strong>하나 이상이 문자열</strong>이므로 <strong>문자열 연결 연산자</strong>로 동작한다.<br>문자열 연결 연산자의 모든 피연산자는 코드의 문맥상 모두 문자열 타입이여야 한다.<br>\n자바스크립트 엔진은 문자열 연산자 표현식을 평가하기 위해 문자열 연결 연산자의 피연산자 중에서 문자열 타입이 아닌 피연산자를 암묵적 타입 변환한다.\n<br></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 숫자 타입</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>          <span class=\"token comment\">// '0'</span>\n<span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>         <span class=\"token comment\">// '-0'</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>          <span class=\"token comment\">// '1'</span>\n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>         <span class=\"token comment\">// '-1'</span>\n<span class=\"token number\">NaN</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>        <span class=\"token comment\">// 'NaN'</span>\n<span class=\"token number\">Infinity</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>   <span class=\"token comment\">// 'Infinity'</span>\n<span class=\"token operator\">-</span><span class=\"token number\">Infinity</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>  <span class=\"token comment\">// '-Infinity'</span>\n\n<span class=\"token comment\">// 불리언 타입</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>       <span class=\"token comment\">// 'true'</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>      <span class=\"token comment\">// 'false'</span>\n\n<span class=\"token comment\">// null 타입</span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>       <span class=\"token comment\">// 'null'</span>\n\n<span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">undefined</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>  <span class=\"token comment\">// 'undefined'</span>\n\n<span class=\"token comment\">// Symbol 타입</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span> <span class=\"token comment\">// Uncaught TypeError: Cannot convert a Symbol value to a string</span>\n\n<span class=\"token comment\">// 객체 타입</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>           <span class=\"token comment\">// '[object Object]'</span>\nMath <span class=\"token operator\">+</span> <span class=\"token string\">''</span>           <span class=\"token comment\">// \"[object Math]\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>             <span class=\"token comment\">// \"\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span>       <span class=\"token comment\">// \"10,20\"</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span> <span class=\"token comment\">// \"function(){}\"</span>\nArray <span class=\"token operator\">+</span> <span class=\"token string\">''</span>          <span class=\"token comment\">// \"function Array() { [native code] }\"</span></code></pre></div>\n<br>\n<h4 id=\"es6에-도입된-템플릿-리터럴\"><a href=\"#es6%EC%97%90-%EB%8F%84%EC%9E%85%EB%90%9C-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"es6에 도입된 템플릿 리터럴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6에 도입된 템플릿 리터럴</h4>\n<p><strong>템플릿 리터럴(`)</strong>의 <strong>문자열 인터폴레이션</strong>은 표현식의 평가 결과를 문자열 타입으로 암묵적 타입 변환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1 + 1 = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1 + 1 = 2'</span></code></pre></div>\n<p>자바스크립트 엔진은 문자열 타입이 아닌 값을 문자열 타입으로 암묵적 타입 변환을 수행할 때 이와 같이 동작한다.</p>\n<hr class=\"sub\" />\n<h3 id=\"숫자-타입으로-변환\"><a href=\"#%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"숫자 타입으로 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 타입으로 변환</h3>\n<h4 id=\"산술-연산자\"><a href=\"#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"산술 연산자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>산술 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token string\">'1'</span>   <span class=\"token comment\">// 0</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token string\">'10'</span>  <span class=\"token comment\">// 10</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token string\">'one'</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p><strong>산술 연산자</strong>의 역할은 숫자 값을 만드는 것이다. 따라서 산술 연산자의 모든 피연산자는 <strong>코드의 문맥상 모두 숫자 타입</strong>이여야한다.<br>\n피연산자를 숫자 타입으로 변환할 수 없는 경우는 산술 연산을 수행할 수 없으므로 표현식의 평가 결과는 NaN이 된다.</p>\n<br>\n<h4 id=\"비교-연산자\"><a href=\"#%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"비교 연산자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'1'</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><strong>비교 연산자</strong>의 역할은 불리언 값을 만드는 것이다.<br>\n<strong>> 연산자</strong>는 피연산자의 크기를 비교하므로 모든 피연산자는 코드의 문맥 상 모두 숫자 타입이여야 한다.</p>\n<br>\n<h4 id=\"단항-연산자\"><a href=\"#%EB%8B%A8%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"단항 연산자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>+단항 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 문자열 타입</span>\n<span class=\"token operator\">+</span><span class=\"token string\">''</span>             <span class=\"token comment\">// 0</span>\n<span class=\"token operator\">+</span><span class=\"token string\">'0'</span>            <span class=\"token comment\">// 0</span>\n<span class=\"token operator\">+</span><span class=\"token string\">'1'</span>            <span class=\"token comment\">// 1</span>\n<span class=\"token operator\">+</span><span class=\"token string\">'string'</span>       <span class=\"token comment\">// NaN</span>\n\n<span class=\"token comment\">// 불리언 타입</span>\n<span class=\"token operator\">+</span><span class=\"token boolean\">true</span>           <span class=\"token comment\">// 1</span>\n<span class=\"token operator\">+</span><span class=\"token boolean\">false</span>          <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// null 타입</span>\n<span class=\"token operator\">+</span><span class=\"token keyword\">null</span>           <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// undefined</span>\n<span class=\"token operator\">+</span><span class=\"token keyword\">undefined</span>      <span class=\"token comment\">// NaN, 주의 falsy 값인데 0이 아닌 NaN</span>\n\n<span class=\"token comment\">// Symbol 타입</span>\n<span class=\"token operator\">+</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// TypeError: Cannot convert a Symbol value to a number</span>\n\n<span class=\"token comment\">// 객체 타입</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>             <span class=\"token comment\">// NaN</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>             <span class=\"token comment\">// 0</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\">// NaN</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p><strong>+ 단항 연산자</strong>는 피연산자가 숫자 타입의 값이 아니면 숫자 타입의 값으로 암묵적 타입 변환을 수행한다.</p>\n<hr class=\"sub\" />\n<h3 id=\"불리언-타입으로-변환\"><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"불리언 타입으로 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불리언 타입으로 변환</h3>\n<p>if문이나 for문과 같은 제어문 또는 삼항 조건 연산자의 조건식은 불리언 값, 즉 놀리적 참, 거짓을 반환해야하는 표현식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2, 4</span></code></pre></div>\n<p>자바스크립트 엔진은 조건식의 평가 결과를 불리언 타입으로 암묵적 타입 변환한다.\n<br></p>\n<p><strong>Truthy 값과 Falsy 값</strong><br>\n자바스크립트 엔진은 불리언 타입이 아닌 값을 Truthy값 또는 Falsy값으로 구분한다.<br>\n즉, Truthy값은 true로, Falsy값은 false로 반환한다.</p>\n<p>아래는 Falsy 값을 소개한다.<br>\n아래의 항목 외 나머지는 거의 Truthy 값이라 생각하면 될 것 같다.</p>\n<ul>\n<li><strong>false</strong></li>\n<li><strong>undefined</strong></li>\n<li><strong>null</strong></li>\n<li><strong>0, -0</strong></li>\n<li><strong>NaN</strong></li>\n<li><strong>”(빈문자열)</strong></li>\n</ul>\n<br>\n<h2 id=\"명시적-타입-변환\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98\" aria-label=\"명시적 타입 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적 타입 변환</h2>\n<p>개발자의 의도에 의해 명시적으로 타입을 변경하는 방법은 다양하다.<br></p>\n<ul>\n<li>표준 빌트인 생성자 함수(String, Number, Boolean)를 new 연산자 없이 호출하는 방법</li>\n<li>자바스크립트에서 제공하는 빌트인 메소드를 사용하는 방법</li>\n<li>암묵적 타입 변환을 이용한 방법.</li>\n</ul>\n<br>\n<h3 id=\"문자열-타입으로-변환-1\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98-1\" aria-label=\"문자열 타입으로 변환 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 타입으로 변환</h3>\n<p>문자열 타입이 아닌 값을 문자열 타입으로 변환하는 방법은</p>\n<ul>\n<li>String 생성자 함수를 new 연산자 없이 호출하는 방법</li>\n<li>Object.prototype.toString 메소드를 사용하는 방법</li>\n<li>문자열 연결 연산자를 이용하는 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1. String 생성자 함수를 new 연산자 없이 호출하는 방법</span>\n<span class=\"token comment\">// 숫자 타입 => 문자열 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"1\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"NaN\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Infinity\"</span>\n\n<span class=\"token comment\">// 불리언 타입 => 문자열 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"true\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"false\"</span>\n\n\n<span class=\"token comment\">// 2. Object.prototype.toString 메소드를 사용하는 방법</span>\n<span class=\"token comment\">// 숫자 타입 => 문자열 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"1\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"NaN\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Infinity\"</span>\n\n<span class=\"token comment\">// 불리언 타입 => 문자열 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"true\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"false\"</span>\n\n\n\n<span class=\"token comment\">// 3. 문자열 연결 연산자를 이용하는 방법(암묵적 타입 변환)</span>\n<span class=\"token comment\">// 숫자 타입 => 문자열 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"1\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"NaN\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Infinity\"</span>\n\n<span class=\"token comment\">// 불리언 타입 => 문자열 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"true\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"false\"</span></code></pre></div>\n<hr class=\"sub\" />\n<h3 id=\"숫자-타입으로-변환-1\"><a href=\"#%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98-1\" aria-label=\"숫자 타입으로 변환 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자 타입으로 변환</h3>\n<p>숫자 타입이 아닌 값을 숫자 타입으로 변환하는 방법은</p>\n<ul>\n<li>Number 생성자 함수를 new 연산자 없이 호출하는 방법</li>\n<li>parseInt, parseFloat 함수를 사용하는 방법(문자열만 숫자 타입으로 변환 가능)</li>\n<li>(+) 단항 연결 연산자를 이용하는 방법</li>\n<li>( * ) 산술 연산자를 이용하는 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1. Number 생성자 함수를 new 연산자 없이 호출하는 방법</span>\n<span class=\"token comment\">// 문자열 타입 => 숫자 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// -1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10.53'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10.53</span>\n\n<span class=\"token comment\">// 불리언 타입 => 숫자 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 0</span>\n\n\n<span class=\"token comment\">// 2. parseInt, parseFloat 함수를 사용하는 방법(문자열만 변환 가능)</span>\n<span class=\"token comment\">// 문자열 타입 => 숫자 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// -1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10.53'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10.53</span>\n\n\n<span class=\"token comment\">// 3. + 단항 연결 연산자를 이용하는 방법</span>\n<span class=\"token comment\">// 문자열 타입 => 숫자 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// -1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'10.53'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10.53</span>\n\n<span class=\"token comment\">// 불리언 타입 => 숫자 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 0</span>\n\n\n<span class=\"token comment\">// 4. * 산술 연산자를 이용하는 방법</span>\n<span class=\"token comment\">// 문자열 타입 => 숫자 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-1'</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// -1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10.53'</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10.53</span>\n<span class=\"token comment\">// 불리언 타입 => 숫자 타입</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 0</span></code></pre></div>\n<hr class=\"sub\" />\n<h3 id=\"불리언-타입으로-변환-1\"><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98-1\" aria-label=\"불리언 타입으로 변환 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불리언 타입으로 변환</h3>\n<ol>\n<li>Boolean 생성자 함수를 new 연산자 없이 호출하는 방법</li>\n<li>!부정 논리 연산자를 두번 사용하는 방법</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1. Boolean 생성자 함수를 new 연산자 없이 호출하는 방법</span>\n<span class=\"token comment\">// 문자열 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 숫자 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// null 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// undefined 타입 => 불리언 타 입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 객체 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true</span>\n\n\n<span class=\"token comment\">// 2. ! 부정 논리 연산자를 두번 사용하는 방법</span>\n<span class=\"token comment\">// 문자열 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// 숫자 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// null 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// undefined 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 객체 타입 => 불리언 타입</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// true</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"단축-평가★\"><a href=\"#%EB%8B%A8%EC%B6%95-%ED%8F%89%EA%B0%80%E2%98%85\" aria-label=\"단축 평가★ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단축 평가★</h2>\n<p>논리합(||) 연산자와 논리곱(&#x26;&#x26;) 연산자의 연산 결과는 불리언 값이 아닐 수도 있다. 이 두 연산자는 언제나 <strong>피연산자 중 어느 한쪽 값을 반환한다</strong>라는 것이다.</p>\n<blockquote>\n<p>대부분의 연산자가 그렇듯 논리합(||)연산자와 논리곱(&#x26;&#x26;)연산자는 왼쪽에서 오른쪽으로 평가가 진행된다.</p>\n</blockquote>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'Cat'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Dog'</span> <span class=\"token comment\">// 'Dog'</span></code></pre></div>\n<p>논리곱 연산자 <strong>&#x26;&#x26;</strong>는 두개의 피연산자가 <strong>모두 true</strong>로 평가될 때 true를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'Cat'</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Dog'</span> <span class=\"token comment\">// 'Cat'</span></code></pre></div>\n<p>논리합 연산자 <strong>||</strong>는 두개의 피연산자 중 하나만 true로 평가되어도 true를 반환한다.\n<br>\n<br></p>\n<p>논리곱 연산자 <strong>&#x26;&#x26;</strong> 논리합 연산자 <strong>||</strong>는 아래와 같이 <strong>논리 평가를 결정한 피연산자를 그대로 반환한다. 이를 단축 평가(Short-Circuit evaluation)라 부른다.</strong></p>\n<article class=\"board-tbl\">\n<table>\n<thead>\n<tr>\n<th align=\"left\">단축 평가 표현식</th>\n<th align=\"left\">평가 결과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">true ll anything</td>\n<td align=\"left\"><strong>true</strong></td>\n</tr>\n<tr>\n<td align=\"left\">false ll anything</td>\n<td align=\"left\"><strong>anything</strong></td>\n</tr>\n<tr>\n<td align=\"left\">true &#x26;&#x26; anything</td>\n<td align=\"left\"><strong>anything</strong></td>\n</tr>\n<tr>\n<td align=\"left\">false &#x26;&#x26; anything</td>\n<td align=\"left\"><strong>false</strong></td>\n</tr>\n</tbody>\n</table>\n</article>\n<br>\n<p>단축 평가는 아래와 같은 상황에서 방어적 코드로서 유용하게 사용된다.</p>\n<ul>\n<li>객체가 null인지 확인하고 프로퍼티를 참조할때</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> elem <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Cannot read property 'value' of null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem <span class=\"token operator\">&amp;&amp;</span> elem<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n\n<span class=\"token comment\">// 객체는 키(key)과 값(value)으로 구성된 프로퍼티(Property)들의 집합이다. 만약 객체가 null인 경우, 객체의 프로퍼티를 참조하면 타입 에러(TypeError)가 발생한다. 이때 단축 평가를 사용하면 에러를 발생시키지 않는다.</span></code></pre></div>\n<ul>\n<li>함수 매개변수에 기본값을 설정할때</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 단축 평가를 사용한 매개변수의 기본값 설정</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  str <span class=\"token operator\">=</span> str <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 0</span>\n<span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// ES6의 매개변수의 기본값 설정</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 0</span>\n<span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>함수를 호출할때 인수를 전달하지 않으면 매개변수는 undefined를 갖는다. 이때 단축 평가를 사용하여 매개변수의 기본값을 설정하면 undefined로 인해 발생할 수 있는 에러를 방지할 수 있다.</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<div class=\"reference-site\">\n<p>  <strong>Reference</strong><br></p>\n<p>  <a href=\"https://poiemaweb.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://poiemaweb.com</a></p>\n</div>","fields":{"slug":"/posts/javascript/TypeCasting","tagSlugs":["/tag/type/","/tag/명시적-타입변환-explicit-coercion/","/tag/암묵적-타입변환-implicit-coercion/"]},"frontmatter":{"date":"2019-10-10","description":"Type Casting에 대해서 알아보자","tags":["Type","명시적 타입변환(Explicit coercion)","암묵적 타입변환(Implicit coercion)"],"title":"타입변환(Type Casting)","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript/TypeCasting"}}}