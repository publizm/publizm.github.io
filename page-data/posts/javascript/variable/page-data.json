{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript/variable","webpackCompilationHash":"97c3010da014863b3684","result":{"data":{"markdownRemark":{"id":"f508dd65-8d18-5b90-9a46-20ab4deda2c1","html":"<span class=\"notice\">\n  <em>TIL 내용이므로 잘못된 내용은 댓글 부탁드립니다</em>\n</span>\n<div id=\"toc\">\n<p><strong><img class=\"emoji-icon\" alt=\"emoji-link\" data-icon=\"emoji-link\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAAYagMeiWXwAAAAJiS0dEAP+Hj8y/AAAAB3RJTUUH4QsFFwYZepoZFwAAA21JREFUOMt1lFtsFHUUxr//zHYue213obFbamutloDaxSigISQYkFrjNSSI9EJ9IWqjkZhoUkVJGhdZO5pGm9IK4QHhQTRIFXwgxqSaWLykamAV02btZaft7navc9vZmb8PKFa6nofz9Ptycr5zIfif+BMcE23Q79SrkSK/uqYqrG0AAFIePw3ep+zXus0Ghrd1Msmfcn5oJ/YCYMvhI6D+uJQ84PCsvhwcZ5Xc2uSDmbqFse1qrJxgGLxflvL7hDn60uLBn04rn9hXrZbMFi0T/uaJlYIhiP64pHSJ00s9b34saietonbil8Y0adNr15+z8+yNOOeXJbVLiC319H++EV8DmEEb0jK3E7ep5+1px3L8AH5zed+2O2HGT23+jpJJ2gQAsJDPBVI8V3QRMP/i3VA8xsu5do1ccTDPpT478cyE5yQAIIjbA0ItDGNJw/UKR+D2/xgpdhB2Pto40xxU75ltYdaZhw7leDxJhnYb67TvlamKf5o+Cr9/VprdR1l7IbnbN2B9as1bGzP3a7Gqic3kq6eNPoFR+x79NnpNMASnPy7lOpUMZUjeGMwlErlL46JFHtIC8qj+eP490YfIlUG5dBYscBS8X5aULn460cs2CHXiRdekAxzNyuzDtH5BIK9UViISC9foxwGwryLjVvr1bnEm2zNyJtTs2Sr4GsYc+QJMq+Ixuja2Kci7I1fDbm0QAMDuRK7D6OXns89Lox3UlKu3iluE9bcWmpj4XfxeszJZcr9DDkMb/tsc0u7lzwrb1BePD2yCFxfJC631b7EtRWM6nRQCVXJ+or82UlTHr5vv0OuZptKc/EUbLgF4hA58+Vqsrt16AKEaQVAWe6eGsmZq2XAZw22LlsKo1/wdBSiNzh0sfOS1q4pEmh/e9R8cYEqLWOIDN928Cs8CAD7ABsb7lPm64LAik4ebjTM3LCdbqa4Oee4TmTvGbP0cNuBu5uc96Xd5H41MhH3qsRXLz263SvlAq/NeUt+YShDhluj+xBucl0b+CAfUkTLHRXYhyu7oXNPH1tAskyJeexVbUPp/P+LW3i97vAQcOMHduiO0Z03I6TFNOf7DhfMXVB0ENiyYMKBDhYYiTNiwCTg44YLI+5qrg540vawUTDAgoLBRQhE6VChQoMGEBZss+x0UAFnxR+iyDOAv/Ud+TW3GONMAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTctMTEtMDVUMTg6NDk6NTArMDA6MDAUXGOwAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDE3LTExLTA1VDEzOjUzOjQ4KzAwOjAwqyFlXwAAAABJRU5ErkJggg==\" title=\"emoji-link\">  Table Of Contents</strong></p>\n<ul>\n<li><a href=\"#%EB%B3%80%EC%88%98%EB%9E%80\">변수란?</a></li>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\">변수 선언</a></p>\n<ul>\n<li><a href=\"#%ED%82%A4%EC%9B%8C%EB%93%9C\">키워드</a></li>\n<li><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90\">식별자</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%B3%80%EC%88%98%EC%84%A0%EC%96%B8%EC%9D%98-%EC%8B%9C%EC%A0%90%EA%B3%BC-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">변수선언의 시점과 호이스팅</a></li>\n<li>\n<p><a href=\"#%EB%B3%80%EC%88%98-%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9%EA%B3%BC-%EC%9E%AC%ED%95%A0%EB%8B%B9\">변수 값의 할당과 재할당</a></p>\n<ul>\n<li><a href=\"#%ED%95%A0%EB%8B%B9\">할당</a></li>\n<li><a href=\"#%EC%9E%AC%ED%95%A0%EB%8B%B9\">재할당</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%96%B8%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4%EC%99%80-%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4\">언매니지드 언어와 매니지드 언어</a></p>\n<ul>\n<li><a href=\"#%EC%96%B8%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4%EC%98%88%EB%A5%BC%EB%93%A4%EC%96%B4-c%EC%96%B8%EC%96%B4\">언매니지드 언어</a></li>\n<li><a href=\"#%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4%EC%98%88%EB%A5%BC%EB%93%A4%EC%96%B4-javascript\">매니지드 언어</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"변수란\"><a href=\"#%EB%B3%80%EC%88%98%EB%9E%80\" aria-label=\"변수란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수란?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// var(키워드, 명령어) 변수명(식별자, identifier)</span></code></pre></div>\n<p>변수(Variable, 식별자(identifier))는 하나의 값을 저장할 수 있는 <strong>메모리 공간에 붙인 이름</strong> 또는 <strong>메모리 공간 자체</strong>를 말한다. 변수에 여러 개를 저장하지 못하는 이유는 두 개 이상의 값을 넣으면 그 데이터를 참조할 때 어느 값을 불러와야 되는지 알 수 없기 때문이다. 그래서 배열이나 객체와 같은 자료 구조를 사용하면 관련이 있는 여러 개의 값을 그룹화하여 하나의 값처럼 사용한다.</p>\n<blockquote>\n<p><strong>메모리(memory)</strong><br>\n메모리는 데이터를 저장할 수 있는 메모리 셀들의 집합체이다. 셀 하나의 크기는 1byte(8bit)이며 컴퓨터는 셀의 크기, 즉 1byte 단위로 데이터를 저장(write)하거나 읽어(read) 들인다. 컴퓨터는 모든 데이터를 2진수로 처리한다. 따라서 메모리에 저장되는 데이터는 데이터의 종류(숫자, 텍스트, 이미지, 동영상 등)와 상관없이 2진수다. 각각의 셀은 고유의 메모리 주소(memory address)를 갖는다. 이 메모리 주소는 메모리 공간의 위치를 나타내며 0부터 시작하여 메모리의 크기만큼 정수로 표현된다. 예를 들어 4GB의 메모리는 0부터 4,294,967,295(0x00000000 ~ 0xFFFFFFFF)까지의 메모리 주소를 갖는다.<br>\n<em>메모리의 값을 가져올때 직접 메모리 주소를 불러와 참조를하면 컴퓨터에 위협을 줄 가능성이 높아지기 때문에 변수를 사용하여 주소의 이름을 부여해주는 것이다.</em></p>\n</blockquote>\n<br>\n<p><strong><img class=\"emoji-icon\" alt=\"emoji-bulb\" data-icon=\"emoji-bulb\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAAB3RJTUUH4QsFFwYYDZ0pgQAABKpJREFUSMedlF9sU1Ucxz/n3naj3cr+MLbB+LM/IIIaUcQYDCEGjfhggjGRRAJqwouJL8iTJibqgwkvPs2QiDEEwRglGAlElDCMY7A5Nje2sbKNdmN/Sm/b2952vbftbe/xYROZoUP5JufhnPP7fT/nd/4JimjDVi8Anz/aSGK97TIi+VpPiatGIEQmb8eVMhH+4bNA9gKLS9xvcN/e1XxzchLN3C1OfzC2oaJi2dv1jet3VtasqlUUVRixUFybGOnQY5Fjyx/3Xdt9oN3ZuVOhrU3yQB14F6Lt+5Hye468t3nHL627e0KDX0o7PSodW5eOHZd5c1JGbn4rfzv65q2vDm55o6drhyrlYV7ZVfvgCi62NnLl4gaq14QeaW5afWLba69vXbr6ZaSsBqHMpUiJEGkyejfdZ46PD/cP7es+nr6892g9Lwy2w8f/+Kn3mh86tJYtzetI1Y2qHrPy/Wdf3LanduOrSLESobgRQkUIBSFUJG7cnmp85WZlJHhrSUmTcX51WbXd0aoRM+y7nsq9gNpai/YLOqEud01tXdVLtS2PIUUdQrjmQ8XdNgfxUdGwkZVr67ertqvJP5Rh/64Fa14IsKwoZlbgCGd5WZWvwV2+HCgFCRRmgTRggbSYG1RQSiqpWF5VKRS1wbEKrFi7qjjg1qjAKuSwMo5AKEIIdS7EjiNDrZBvB24g9S8gMwMoCAEoQlhZRxGOzR2D4oDr3T4S6TThqBmPx5LhfMYAcuDyIbxbIOcBu4BwbQJ3NWAjCwkSupGKp6ywIfKM9EeLA2zHxPG58Cfi0WBQ64zcvomQBhKB9GygYEmcVBbpWgeKG+EkSWqjBEZn/vRPJyb0XJqfu5PFATfGcoRTSbr6cpmhQOS7a793j6fjfnBmkYob2wyTS40jlSXIQppcJshgZ6d+wz998sericSAliasZxcAFh45EEs57Hq6irZBTatxO/maanVb/Zr1pUgFJ58F1YcoqUCQJjhwLnfxXNuR0x2BY19/us08ez7ATMxeHJCezZOK55jRC3YsmQo0LhMNa5rqnvKWr8CMjmFnkpT4GjATw1z99UzbyZ96P7k6mApd7J9kZNz+t93CLfpbU8k8mzeXMTyR1foGJk8Ehno0yABuJKWoCswE+qzrA8ETl/qM4PPPLJN3ppz7Wd0fADCbVDm4ZxOanrwxMa4F9ahOPJ5Ej8+SSKYIjk1qd7RU7+G3tjvNLWXFbHAVm9CnTfxNBf7oihrrniS0pOsm2bQh3aUePJFhcWUwG742ampTKy0ud00WBRStQM/mGRyNEcuSjZpew1PRSMhwiZKqdaJl43Mk7Kpkr1+z/OMRkmn5/wEAM9NRojHDsTL2bSOZxldZT8FxMx2KMDubmQIsPZpYzGJxQKEAl35rQ1EwVZdKeVkZXq8XVVWQ0rEBR6jqwwMATp86xcjI6HRvT6+lRcJMT0/S29NTGA8Ghs+3dTqmmV40XzwIAAiPx7uquaXlo6VLK95xu0vURCJ+dmIi+KGRSPiBAnNf60MBBHM3rRJ4QlWVnaqqltp2vkNK2Q9ogDUPefgKmHvxJYB3vp8BsvPGzmIVPKz+y8IA+Av71U7Uqnsg/AAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxNy0xMS0wNVQxODo0OTo1MCswMDowMBRcY7AAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTctMTEtMDVUMTM6NTM6NDgrMDA6MDCrIWVfAAAAAElFTkSuQmCC\" title=\"emoji-bulb\">Tips</strong><br></p>\n<ul>\n<li>메모리(RAM) - 기억하는 곳 (예를 들어 RAM 4G는 메모리가 데이터를 4기가까지 기억할 수 있다는 뜻이다.)<br></li>\n<li>CPU - 기억한 것을 연산하는 곳</li>\n</ul>\n<br>\n<br>\n<h2 id=\"변수-선언\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"변수 선언 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 선언</h2>\n<p>변수 선언은 변수 이름을 자바스크립트 엔진에 알려 등록하고 변수 값을 저장하기 위한 메모리 영역의 확보를 명령하여 값을 저장할 수 있도록 준비하는 것을 의미한다.</p>\n<blockquote>\n<p>변수의 값을 저장하는 것을 할당이라고 의미하고, 저장된 값을 읽어드리는 행위를 참조라고 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>자바스크립트의 선언의 과정</strong></p>\n<ul>\n<li>선언 단계(Declaration phase): 변수 이름을 등록하여 자바스크립트 엔진에 변수의 존재를 알린다.</li>\n<li>초기화 단계(Initialization phase): 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined(원시 값)를 할당한다.</li>\n</ul>\n<br>\n<h3 id=\"키워드\"><a href=\"#%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"키워드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>키워드</h3>\n<p>키워드(keyword)는 자바스크립트 코드를 실행하는 자바스크립트 엔진이 수행할 동작을 규정한 일종의 명령어이다. 자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행한다. var 키워드가 실행되면 자바스크립트 엔진은 새로운 변수를 선언한다.</p>\n<blockquote>\n<p><strong>var에만 해당하는 특징</strong><br>\n변수 선언만 해도 암묵적으로 자바스크립트 엔진은 undefined(원시 값)을 변수에 할당하여 메모리가 만든 메모리의 공간에 넣어둔다.<br>\n이유는 새롭게 만든 메모리에 예전에 쓰였던 메모리(Garbage Value)가 남아 있을 경우가 있기 때문에 초기화를 한다.</p>\n</blockquote>\n<hr class=\"sub\" />\n<h3 id=\"식별자\"><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90\" aria-label=\"식별자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>식별자</h3>\n<p>변수 이름을 식별자(identifier)라고도 부른다. 식별자는 어떤 값을 구별하여 식별해낼 수 있는 고유한 이름을 말한다.\n식별자는 특별한 네이밍 규칙을 갖는다.</p>\n<ul>\n<li>특수문자(<strong>underscore(_), 달러 기호($)는 제외</strong>)를 제외한 모든 문자, 숫자</li>\n<li>첫글자(시작)은 특수문자(<strong>underscore(_), 달러 기호($)는 제외</strong>)를 제외한 모든 문자로 시작해야 된다. <strong>숫자로 시작되는 것은 허용하지 않는다</strong></li>\n<li><strong>예약어</strong>는 식별자로 사용할 수 없다.</li>\n</ul>\n<blockquote>\n<p><strong>예약어</strong><br>\n예약어(reserved word)는 프로그래밍 언어에서 사용되고 있거나 사용될 예정인 단어들을 말한다. 자바스크립트의 예약어는 아래와 같다.<br>\nawait break case catch class const continue debugger default delete do else enum export extends false finally for function if implements* import in Instanceof interface* let* new null package* private* protected* public* return super static* Switch this throw true try typeof var void while with yield*<br>\n*식별자로 사용 가능하나 Strict Mode에서는 사용 불가</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"변수선언의-시점과-호이스팅\"><a href=\"#%EB%B3%80%EC%88%98%EC%84%A0%EC%96%B8%EC%9D%98-%EC%8B%9C%EC%A0%90%EA%B3%BC-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"변수선언의 시점과 호이스팅 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수선언의 시점과 호이스팅</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제를 보면 <strong>변수 선언문(var a)보다 변수를 참조하는 코드(console.log(a))</strong>가 먼저 쓰여있다.\n자바스크립트 코드는 한 줄씩 순차적으로 실행(런타임 환경)이므로 <strong>참조하는 코드인 console.log(a);</strong>가 가장 먼저 실행되고 순차적으로 다음 줄에 있는 코드를 실행한다.<br>\n따라서 <strong>참조해야 될 대상이 없는 참조 코드(console.log(a))가 실행되는 시점에 참조 에러(ReferenceError)가 발생해야 될 것 같이 보인다.</strong><br>\n하지만 참조 에러(ReferenceError)는 발생하지 않고 <strong>undefined</strong>가 출력된다.\n<br></p>\n<p>그 이유는 변수 선언(var a)이 소스 코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임(run-time)이 아니라 그 <strong>이전 단계에서 먼저 실행</strong>되기 때문이다.</p>\n<blockquote>\n<p>자바스크립트 엔진은 소스 코드를 한 줄씩 순차적으로 실행하기에 앞서 먼저 코드의 평가 과정을 거치면서 코드 실행을 위한 준비를 한다. 이때, <em>코드 실행을 위한 준비 단계인 코드의 평가 과정에서 자바스크립트 엔진은 <strong>변수 선언을 포함한 모든 선언문(변수 선언문, 함수 선언문 등)을 소스 코드에서 찾아내어 먼저 실행한다.(이를 호이스팅이라 한다.)</strong> 그리고 코드의 평가 과정이 끝나면 비로소 변수 선언을 포함한 모든 선언문을 제외하고 코드가 한 줄씩 순차적으로 실행한다.</em></p>\n</blockquote>\n<p>즉, 자바스크립트 엔진은 변수 선언이 소스 코드의 위치에 상관없이 다른 코드보다 먼저 실행한다.</p>\n<p>위에서 볼 수 있듯 변수 선언(선언 단계와 초기화 단계)이 소스 코드가 순차적으로 실행되는 런타임 이전 단계에서 먼저 실행된다는 것이다. 이처럼 <strong>변수 선언문이 코드의 선두로 끌어올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅(Variable Hoisting)</strong>이라 한다.<br>\n호이스팅은 변수 선언 뿐만이 아니라 <strong>var</strong>, <strong>let</strong>, <strong>const</strong>, <strong>function</strong>, <strong>class</strong> 키워드를 사용하여 선언된 모든 식별자도 호이스팅된다. 모든 선언문은 런타임 이전 단계에서 먼저 실행되기 때문이다.</p>\n<br>\n<br>\n<h2 id=\"변수-값의-할당과-재할당\"><a href=\"#%EB%B3%80%EC%88%98-%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9%EA%B3%BC-%EC%9E%AC%ED%95%A0%EB%8B%B9\" aria-label=\"변수 값의 할당과 재할당 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 값의 할당과 재할당</h2>\n<p>변수에 값을 할당(대입, 저장)할 때는 할당 연산자인 <strong>=</strong>를 사용한다.<br>\n할당 연산자는 우변의 값을 좌변의 변수에 할당한다.</p>\n<br>\n<h3 id=\"할당\"><a href=\"#%ED%95%A0%EB%8B%B9\" aria-label=\"할당 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>할당</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변수 선언</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 값의 할당</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변수 선언과 동시에 값을 할당</span></code></pre></div>\n<p>위의 예제인 선언과 할당을 구분한 예제와 선언과 할당을 같이 한 예제는 정확히 동일하게 동작한다.<br>\n이때 주의할 것은 변수 선언은 소스 코드가 순차적으로 실행되기 이전, 즉 런타임 이전에 먼저 실행되지만 <strong>값의 할당은 소스 코드가 순차적으로 실행되는 시점인 런타임에 실행된다</strong>는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변수 선언과 동시에 값의 할당</span>\n\n<span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변수 선언</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값의 할당</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 100</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 200</span></code></pre></div>\n<p>a와 b의 값을 할당하는 시점에는 이미 변수 선언이 완료된 상태이고 변수는 <strong>undefined(원시 값)</strong>으로 초기화되어 있다. 따라서 변수 a,b에 값을 할당하면 변수 a,b의 값은 <strong>undefined</strong>에서 새롭게 할당된 숫자 값으로 변경(재할당)되는 것이다.<br>\n<em>이렇듯 변수 선언과 값의 할당을 각각 실행했을 때와 변수의 선언과 값의 할당을 하나의 문으로 단축 표현했을 때 모두 동일하다는 것을 알 수 있다.</em></p>\n<hr class=\"sub\" />\n<h3 id=\"재할당\"><a href=\"#%EC%9E%AC%ED%95%A0%EB%8B%B9\" aria-label=\"재할당 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재할당</h3>\n<p>이미 값이 할당되어 있는 변수에 새로운 값을 또다시 할당하는 것을 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변수 선언과 동시에 값의 할당</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값의 재할당</span></code></pre></div>\n<p><strong>var</strong>키워드로 선언한 변수의 값은 재할당 할 수 있다.<br>\n<strong>var</strong>키워드로 선언한 변수는 선언과 동시에 <strong>undefined(원시 값)</strong>으로 초기화되기 때문에 엄밀히 말하자면 변수에 처음으로 값을 할당하는 것도 사실은 재할당이라고 볼 수 있다.<br>\n<br></p>\n<p>재할당은 변수에 저장된 값을 다른 값으로 변경한다. 이때 다른 메모리를 사용하는데 최초 할당할 때처럼 undefined(원시 값)을 이용해서 공간을 부여하진 않고 <strong>다른 셀</strong>에 값을 대입해 다른 메모리 공간을 차지한다. <em>이전 변수의 값인 80은 어떠한 변수도 값으로 갖지 않게 되므로 더 이상 필요하지 않다는 것을 의미한다. 이러한 불필요한 값들은 가비지 컬렉터(Garbage Collector)에 의해 메모리에서 자동 해제된다.</em></p>\n<p><strong><img class=\"emoji-icon\" alt=\"emoji-exclamation\" data-icon=\"emoji-exclamation\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAMAAADXqc3KAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAACKFBMVEUAAAD/Z2f+pKTZGhrnMzPFDw//KirSFha8Dg7VExPJEhLLEhLFERHGEhLCDw/BERG+EBC5EBC2EBCzDg6xDg6sDQ3KEhKwCQlVBwfoFhbBEBDNExO6EBC8ERGxDw+wDw+qDg6ZDAyaDQ2jPj7/ZGStNzfGERHcLy/JJCSrDg6nDAycDQ2cCwuLCwuaDQ2LCQl6Cgp0CQn/AAD9l5f3s7P4srL4srL4srL6r6//paVPAADlMjLwTEzxTk7xTk7xTk7vSEjnMzPUFhbhGhrSFhbNERHbExPIEhLIEhLbFBTYExPDERHEERHWExPTExO+Dw+/ERHSExPOEhK0Dw+1Dw/NEhLKEhKgDw+rDQ3IERHGEREAAAB5BwfDERHAERG+EBDKEhK6EBC5EBDFERG2Dw+1EBDEERHBERGwDw+vDg68EBC6EBCqDw+ZDAyYDAyZCwuYDAyZDQ11Ly/KRUXXTU3FQkLJIyPQKCjNKCjQKCjFISGmDQ27ExO6ExMAAACYDQ2rDg6pDQ1/BwcrAQGVDAynDg6kDQ2SCwtzCAiCCgqHCwuACgpvCAgAAAAAAAAAAADjGhrlGxvlGxvmGxveExPiFBThFBTiFBTfFBTfFBTfFBTcFBTcFBTcFBTZExPZExPZExPWExPWExPWExPTEhLTEhLSEhLPEhLQEhLOEhLMEhLNEhLIEhLKEhLHERHBEBC6EBC2DQ27ERG1Dw+1Dw+0Dw+tDg7////DS/URAAAAkHRSTlMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAgICAgIBAGGjoKGhny+C+0hl8TxN9+MpNe3VFiHjxQwW0qwGDLuSAAKle5H9ZHb3Slr98DRG+OMmIo2WfhABGzAURtDvvSwLtYsAEcaeAwF9+/BYDmOOUQUAAADrN6nbAAAAAWJLR0S33QA7ZwAAAAd0SU1FB+ELBRcGF50iNBAAAAD1SURBVCjPY2DADxiNjE1MzcwtLJnQJJitrG1s7ewdHFnQJFjZnCZMnDTZ2YUdTYKD03XK1GnT3dy50C3h9vCcMXOWlzcPugSvj+/sOXP9/PnQJfgDAufNXxAULIAuIRgSunDR4rBwIXQJ4YjIJUuXRUWLoEuIxsQuX7EyTkwcXUJCMn7V6oREKcxAkU5aszY5RQZTQjY1bV16hhymhHxm1vrsHAVMCcXcvPyCQiVMCeWi4pJSFVUMcTX1svKKyioNDAnN6poNGzfV1mmhS2jXN2zesrWxSQddQre5pXVbW7uePoZZBh2dXd09hgxYQG9fPwMRAABf+kEOndojbAAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxNy0xMS0wNVQxODo0OTo1MCswMDowMBRcY7AAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTctMTEtMDVUMTM6NTM6NDgrMDA6MDCrIWVfAAAAAElFTkSuQmCC\" title=\"emoji-exclamation\"> 주의할 점</strong><br>\n재할당은 말이 재할당인 것이지 기존에 가지고 있던 원시 값을 다른 내용으로 바꾸는 것이 아니라, 다른 메모리 셀에 변경 값을 저장하여 그곳을 가리키게 되는 것이다.</p>\n<br>\n<blockquote>\n<p><strong>가비지 컬렉터(Garbage Collector)</strong><br>\n애플리케이션이 확보한 메모리를 주기적으로 검사하여 더 이상 사용되고 있지 않는 메모리를 해제하는 기능을 말한다. 자바스크립트는 가비지 컬렉터를 내장하고 있는 <em>매니지드 언어</em>이다. 이를 통해 메모리 누수를 방지한다.</p>\n</blockquote>\n<br>\n<h2 id=\"언매니지드-언어와-매니지드-언어\"><a href=\"#%EC%96%B8%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4%EC%99%80-%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4\" aria-label=\"언매니지드 언어와 매니지드 언어 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언매니지드 언어와 매니지드 언어</h2>\n<p>프로그래밍 언어는 <em>메모리 관리 방식</em> 에 의해 언 매니지드 언어와 매니지드 언어로 분류할 수 있다.</p>\n<br>\n<h3 id=\"언매니지드-언어예를들어-c언어\"><a href=\"#%EC%96%B8%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4%EC%98%88%EB%A5%BC%EB%93%A4%EC%96%B4-c%EC%96%B8%EC%96%B4\" aria-label=\"언매니지드 언어예를들어 c언어 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언매니지드 언어(예를들어 C언어)</h3>\n<p>개발자가 명시적으로 메모리를 할당하고 해제하기 위해 저수준(low-level) 메모리 관리 기능을 제공한다. 메모리 관리를 개발자가 주도하므로 개발자의 역량에 의해 최적의 퍼포먼스를 확보할 수 있지만 그 반대의 경우, 치명적 오류를 생산할 가능성도 동시에 존재한다.<br></p>\n<hr class=\"sub\" />\n<h3 id=\"매니지드-언어예를들어-javascript\"><a href=\"#%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4%EC%98%88%EB%A5%BC%EB%93%A4%EC%96%B4-javascript\" aria-label=\"매니지드 언어예를들어 javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매니지드 언어(예를들어 Javascript)</h3>\n<p>메모리의 할당 및 해제를 위한 메모리 관리 기능을 언어 차원에서 담당하고 개발자의 직접적인 메모리 제어를 허용하지 않는다. 즉, 개발자가 메모리를 할당하고 해제할 수 없다. 더 이상 사용하지 않는 메모리의 해제는 <strong>가비지 컬렉터</strong>가 수행하며, 개발자가 관여할 수없다. 매니지드 언어는 개발자의 역량에 의존하는 부분이 상대적으로 작아져 어느 정도 일정한 생산성을 확보할 수 있는 장점이 있지만 퍼포먼스 면에서의 손실은 감수할 수밖에 없다.</p>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<div class=\"reference-site\">\n<p>  <strong>Reference</strong><br></p>\n<p>  <a href=\"https://poiemaweb.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://poiemaweb.com</a></p>\n</div>","fields":{"slug":"/posts/javascript/variable","tagSlugs":["/tag/variable/","/tag/var/","/tag/let/","/tag/const/"]},"frontmatter":{"date":"2019-10-06","description":"Variable에 대해서 알아보자","tags":["variable","var","let","const"],"title":"변수(Variable)","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript/variable"}}}