{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript/Function","webpackCompilationHash":"7db895a24066c07ced6d","result":{"data":{"markdownRemark":{"id":"422421f2-84b0-578f-9201-9b86fd549cb9","html":"<span class=\"notice\">\n  <em>잘못된 정보가 있다면 댓글로 의견 부탁드립니다.</em>\n</span>\n<div id=\"toc\">\n<p><strong><img class=\"emoji-icon\" alt=\"emoji-link\" data-icon=\"emoji-link\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAAYagMeiWXwAAAAJiS0dEAP+Hj8y/AAAAB3RJTUUH4QsFFwYZepoZFwAAA21JREFUOMt1lFtsFHUUxr//zHYue213obFbamutloDaxSigISQYkFrjNSSI9EJ9IWqjkZhoUkVJGhdZO5pGm9IK4QHhQTRIFXwgxqSaWLykamAV02btZaft7navc9vZmb8PKFa6nofz9Ptycr5zIfif+BMcE23Q79SrkSK/uqYqrG0AAFIePw3ep+zXus0Ghrd1Msmfcn5oJ/YCYMvhI6D+uJQ84PCsvhwcZ5Xc2uSDmbqFse1qrJxgGLxflvL7hDn60uLBn04rn9hXrZbMFi0T/uaJlYIhiP64pHSJ00s9b34saietonbil8Y0adNr15+z8+yNOOeXJbVLiC319H++EV8DmEEb0jK3E7ep5+1px3L8AH5zed+2O2HGT23+jpJJ2gQAsJDPBVI8V3QRMP/i3VA8xsu5do1ccTDPpT478cyE5yQAIIjbA0ItDGNJw/UKR+D2/xgpdhB2Pto40xxU75ltYdaZhw7leDxJhnYb67TvlamKf5o+Cr9/VprdR1l7IbnbN2B9as1bGzP3a7Gqic3kq6eNPoFR+x79NnpNMASnPy7lOpUMZUjeGMwlErlL46JFHtIC8qj+eP490YfIlUG5dBYscBS8X5aULn460cs2CHXiRdekAxzNyuzDtH5BIK9UViISC9foxwGwryLjVvr1bnEm2zNyJtTs2Sr4GsYc+QJMq+Ixuja2Kci7I1fDbm0QAMDuRK7D6OXns89Lox3UlKu3iluE9bcWmpj4XfxeszJZcr9DDkMb/tsc0u7lzwrb1BePD2yCFxfJC631b7EtRWM6nRQCVXJ+or82UlTHr5vv0OuZptKc/EUbLgF4hA58+Vqsrt16AKEaQVAWe6eGsmZq2XAZw22LlsKo1/wdBSiNzh0sfOS1q4pEmh/e9R8cYEqLWOIDN928Cs8CAD7ABsb7lPm64LAik4ebjTM3LCdbqa4Oee4TmTvGbP0cNuBu5uc96Xd5H41MhH3qsRXLz263SvlAq/NeUt+YShDhluj+xBucl0b+CAfUkTLHRXYhyu7oXNPH1tAskyJeexVbUPp/P+LW3i97vAQcOMHduiO0Z03I6TFNOf7DhfMXVB0ENiyYMKBDhYYiTNiwCTg44YLI+5qrg540vawUTDAgoLBRQhE6VChQoMGEBZss+x0UAFnxR+iyDOAv/Ud+TW3GONMAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTctMTEtMDVUMTg6NDk6NTArMDA6MDAUXGOwAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDE3LTExLTA1VDEzOjUzOjQ4KzAwOjAwqyFlXwAAAABJRU5ErkJggg==\" title=\"emoji-link\">  Table Of Contents</strong></p>\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98%EB%9E%80\">함수란?</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EC%9E%AC%EC%82%AC%EC%9A%A9\">함수의 재사용</a></li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4\">함수 리터럴</a></p>\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8-vs-%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4\">함수 선언문 vs 함수 리터럴</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98\">함수 정의</a></p>\n<ul>\n<li><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8\">함수 선언문</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9Dfunction-expression\">함수 표현식(Function Expression)</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8%EA%B3%BC-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EC%83%9D%EC%84%B1%EC%8B%9C%EC%A0%90%EA%B3%BC-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EB%B9%84%EA%B5%90\">함수 선언문과 함수 표현식의 생성시점과 호이스팅 비교</a></li>\n<li><a href=\"#function-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98function-constructor\">Function 생성자 함수(Function Constructor)</a></li>\n<li><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98arrow-function-es6\">화살표 함수(Arrow Function): ES6</a></li>\n</ul>\n</li>\n<li><a href=\"#%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\">함수 호출</a></li>\n<li>\n<p><a href=\"#%EC%9D%B8%EC%88%98argument%EC%99%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98parameter\">인수(argument)와 매개변수(parameter)</a></p>\n<ul>\n<li><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98parameter%EC%9D%98-%EA%B0%9C%EC%88%98\">매개변수(parameter)의 개수</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%99%B8%EB%B6%80-%EC%83%81%ED%83%9C%EC%9D%98-%EB%B3%80%EA%B2%BD%EA%B3%BC-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">외부 상태의 변경과 함수형 프로그래밍</a></li>\n<li><a href=\"#%EB%B0%98%ED%99%98%EB%AC%B8\">반환문</a></li>\n<li><a href=\"#%EC%A6%89%EC%8B%9C%EC%8B%A4%ED%96%89%ED%95%A8%EC%88%98iife%E2%98%85\">즉시실행함수(IIFE)★</a></li>\n<li><a href=\"#%EC%9E%AC%EA%B7%80-%ED%95%A8%EC%88%98\">재귀 함수</a></li>\n<li><a href=\"#%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98nested-function%E2%98%85\">중첩 함수(nested function)★</a></li>\n<li><a href=\"#%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%E2%98%85\">콜백함수★</a></li>\n</ul>\n</div>\n<h2 id=\"함수란\"><a href=\"#%ED%95%A8%EC%88%98%EB%9E%80\" aria-label=\"함수란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수란?</h2>\n<p><b>여러가지의 실행할 문들을 코드 블록으로 감싼 하나의 실행단위이다.</b><br>\n함수를 실행하는 것은 표현식이므로 값을 만든다. 값이므로 변수에 담을 수 있다는 의미이다.</p>\n<ul>\n<li>함수 자체가 값이다.</li>\n<li>자바스크립트의 함수는 일급 객체이다.</li>\n<li>함수는 프로퍼티를 가지고 있다.</li>\n<li>외부에 것(인수, argument)을 받아와 매개변수(인자, Parameter)로 들어오면 함수는 이것을 반환하여 반환 값(return value)을 뱉어낸다. 이 반환 값은 7개의 데이터 타입 중 하나이다.</li>\n<li>함수의 코드 블록안에는 0개 이상의 문을 가지고 있다.</li>\n<li>함수는 실행단위마다 나누어 짧게 짧게 쓰는 것이 유용하다.</li>\n</ul>\n<blockquote>\n<p>같은 스코프내에는 동일한 이름의 변수를 선언할 수 없다. 스코프는 식별자를 찾는 규칙이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 함수 정의</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 함수 호출</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 함수 add에 인수 2, 5를 전달하면서 호출하면 7을 반환한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span></code></pre></div>\n<br>\n<p><strong>순수함수와 비순수 함수</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 순수 함수의 예</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// 비순수 함수의 예</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 카운트를 나타내는 상태: increase 함수에 의해 변화한다.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 외부 상태를 변경한다.</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<ul>\n<li>\n<p>순수 함수</p>\n<ul>\n<li>동일한 인수(argument)가 전달되면 언제나 동일한 값을 반환하는 함수를 말한다.</li>\n<li>오직 인수에만 의존하여 반환값을 만든다.</li>\n<li>함수의 외부 상태를 변경하지 않는다.</li>\n</ul>\n</li>\n<li>\n<p>비순수 함수</p>\n<ul>\n<li>함수의 외부 상태에 의존하여 외부 상태에 따라 반환 값이 달라진다.</li>\n<li>함수의 외부 상태를 변경하는 부수효과가 있다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>함수 외부 상태를 변경하면 상태 변화를 추적하기 어려워진다. 따라서 함수 외부 상태의 변경을 지양하는 순수 함수를 사용하는 것이 좋다.</p>\n</blockquote>\n<br>\n<br>\n<h2 id=\"함수의-재사용\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EC%9E%AC%EC%82%AC%EC%9A%A9\" aria-label=\"함수의 재사용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 재사용</h2>\n<p>동일한 작업을 반복적으로 수행해야 한다면 같은 코드를 중복해서 여러 번 작성하는 것이 아니라 미리 정의된 함수를 재사용하는 것이 효율적이다. 함수는 몇 번이든 호출할 수 있으므로 <strong>코드의 재사용</strong>이라는 측면에서 매우 유용하다.\n<strong>유지보수의 편의성을 높이고 실수를 줄여 코드의 신뢰성을 높인다.</strong></p>\n<br>\n<br>\n<h2 id=\"함수-리터럴\"><a href=\"#%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"함수 리터럴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 리터럴</h2>\n<p>함수는 함수 리터럴로 생성할 수 있다. 함수 리터럴은 function 키워드, 함수 이름, 매개변수 목록 그리고 함수 몸체로 구성된다.\n자바스크립트의 함수는 값이기 때문에 리터럴로 만드는 것이다. <b>일반 객체와 함수 객체의 차이는 함수 객체는 호출 할 수 있다는 점이다.</b></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>함수 리터럴의 구성요소</strong></p>\n<ul>\n<li>\n<p><strong>함수 이름</strong></p>\n<ul>\n<li>함수 이름은 식별자이므로 식별자 네이밍 규칙을 준수해야한다.</li>\n<li>함수 이름은 <strong>함수 몸체 내에서만(주로 재귀 함수일때 사용)</strong> 참조할 수 있는 식별자이다.</li>\n<li>함수 이름은 생략할 수 있다.(함수 선언문과 차이점)</li>\n<li>함수 이름이 있는 함수를 기명 함수(named function), 함수 이름이 없는 함수를 익명 함수(anonymous function)이라 한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>매개변수(parameter) 목록</strong></p>\n<ul>\n<li>매개변수는 함수 외부에서 참조가 안된다.</li>\n<li>0개 이상의 매개변수(parameter)를 괄호로 감싸고 쉼표(,)로 구분한다.</li>\n<li>매개변수(parameter)에 인수(argument)가 할당된다.</li>\n<li>매개변수(parameter)는 함수 몸체 내에서 변수와 동일하게 취급된다. 따라서 매개변수(parameter)도 변수와 마찬가지로 식별자 네이밍 규칙을 준수해야한다.</li>\n<li>매개변수(parameter)는 함수가 <strong>호출</strong>되면 함수에 있는 문들이 한줄 한줄 실행되기 <strong>이전에</strong> 선언된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>함수 몸체</strong></p>\n<ul>\n<li>함수가 호출되었을 때 일괄적으로 <strong>실행될 문들을 하나의 실행 단위</strong>로 정의한 코드 블록이다.</li>\n<li>함수 몸체는 <strong>함수 호출</strong>에 의해 실행된다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3 id=\"함수-선언문-vs-함수-리터럴\"><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8-vs-%ED%95%A8%EC%88%98-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"함수 선언문 vs 함수 리터럴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 선언문 vs 함수 리터럴</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 함수 선언문</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 함수리터럴</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ()는 함수리터럴로 평가되기 위한 그룹 연산자이다.</span>\n<span class=\"token comment\">// 즉 표현식(값)이 와야 될 자리</span>\n\nfoo <span class=\"token comment\">// ƒ foo() {}</span>\n\nbar <span class=\"token comment\">// ReferenceError: bar is not defined</span>\n    <span class=\"token comment\">// 리터럴을 그룹 연산자 안의 값 평가를 마쳐서 변수에 저장이 된 것이 아니다.</span></code></pre></div>\n<p>구문은 똑같지만 비교 할 줄 알아야한다.</p>\n<ul>\n<li><strong>함수 선언문</strong> : 표현식이 올 자리가 <strong>아닌 곳</strong>에 온 함수 리터럴은 <strong>함수 선언문</strong>으로 해석한다. 한마디로 표현식이 아닌 문이다. 함수 이름의 식별자로 함수 리터럴이 담아진다.</li>\n<li><strong>함수 리터럴</strong> : 변수를 만든 것이 아니고 값(함수 객체)만 만드는 것이다. 그래서 <strong>표현식이 올 자리</strong>에 <strong>함수 리터럴</strong>이 온다. 값만 오기 때문에 호출할 수 있는 식별자가 없다.(명확하게 함수 리터럴을 변수에 할당했다면 자바스크립트 엔진은 이것을 함수 리터럴로 판단한다. 이를 함수 표현식이라 한다.)</li>\n</ul>\n<br>\n<br>\n<h2 id=\"함수-정의\"><a href=\"#%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98\" aria-label=\"함수 정의 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 정의</h2>\n<p>함수 정의만으로 함수는 실행되지 않는다.<br>\n함수를 정의하는 방법은 4가지가 있다.</p>\n<h3 id=\"함수-선언문\"><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8\" aria-label=\"함수 선언문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 선언문</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<ul>\n<li><em>식별자</em> 가 있고, 표현식이 아닌 문이다.</li>\n<li>코드 블록을 가지고 있다.</li>\n<li>문이기 때문에 세미콜론(;)이 필요없다.</li>\n<li>함수 호이스팅이 적용되어, <b><strong>런타임 이전 환경에서 선언과 동시에 함수 이름으로 암묵적으로 변수(식별자)가 생성되고 그 식별자에 함수 객체를 binding 해준다.(이때 코드 블록안에 문들이 실행되는 것은 아니다)</strong></b> 함수 이름이 식별자는 아니다.</li>\n<li>함수 호이스팅으로 인해 어느 위치(함수 선언문 위쪽 포함)에서도 함수 호출이 가능하다.</li>\n</ul>\n<hr class=\"sub\" />\n<h3 id=\"함수-표현식function-expression\"><a href=\"#%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9Dfunction-expression\" aria-label=\"함수 표현식function expression permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 표현식(Function Expression)</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// add is not a function</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<ul>\n<li>함수 식별자가 있어도 되고 없어도 된다.</li>\n<li>함수 호이스팅 방식에 영향을 안 받는다.</li>\n<li>변수 호이스팅 처럼 런타임 이전 환경에서 add가 먼저 선언되고 <strong>런타임 환경에서 할당문을 만나면 그때 함수객체가 할당된다.</strong></li>\n<li>할당된 이후에 호출이 가능하다. 할당 이전에 호출 시 undefined(변수와 같다)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 표현식에서 bar 식별자(함수 이름)는 별로 추천하지 않지만, 재귀함수를 사용할때는 사용한다 bar 식별자는 bar 함수 스코프 내에서만 쓸 수 있다.</span></code></pre></div>\n<ul>\n<li>위 경우엔 bar 함수 내부에서 밖에 인식이 안되기 때문에 외부에서 bar 식별자를 사용할 수 없다.</li>\n<li>위에 이유로 일반적으로 함수리터럴에 네이밍을 붙이지 않는다.</li>\n</ul>\n<hr class=\"sub\" />\n<h3 id=\"함수-선언문과-함수-표현식의-생성시점과-호이스팅-비교\"><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8%EA%B3%BC-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%98-%EC%83%9D%EC%84%B1%EC%8B%9C%EC%A0%90%EA%B3%BC-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EB%B9%84%EA%B5%90\" aria-label=\"함수 선언문과 함수 표현식의 생성시점과 호이스팅 비교 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 선언문과 함수 표현식의 생성시점과 호이스팅 비교</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 함수 참조</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ƒ add(x, y)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 함수 호출</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: sub is not a function</span>\n\n<span class=\"token comment\">// 함수 선언문</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 함수 표현식</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sub</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제처럼 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르다.</p>\n<hr class=\"sub\" />\n<h3 id=\"function-생성자-함수function-constructor\"><a href=\"#function-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98function-constructor\" aria-label=\"function 생성자 함수function constructor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function 생성자 함수(Function Constructor)</h3>\n<p>자바스크립트가 기본 제공하는 빌트인 함수인 Function 생성자 함수*는 매개변수 목록과 함수 몸체를 문자열로 전달받는다. new 연산자와 함께 호출하며 생성된 함수 객체를 반환한다. (사실 new 연산자 없이 호출하여도 결과는 동일하다.)</p>\n<blockquote>\n<p>생성자함수(Constructor Function)<br>\n생성자 함수는 객체를 생성하는 함수를 말한다. 객체를 생성하는 방식은 객체 리터럴 이외에 다양한 방법이 있다.<br>\n자세한 내용은 <a href=\"/posts/javascript/constructor\">여기</a>에서 살펴볼 수 있다.</p>\n</blockquote>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> add <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return x + y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<ul>\n<li>마지막 argument 이전 argument까지 parameter로 판단한다.</li>\n<li>마지막 argument를 함수 몸체에 들어갈 문들로 인식한다.</li>\n</ul>\n<p>Function 생성자 함수로 생성한 함수는 함수 선언문이나 함수 표현식으로 생성한 함수와 다르게 동작한다. <b>Function 생성자 함수 방식으로 생성한 함수는 클로저를 생성하지 않는다.</b></p>\n<hr class=\"sub\" />\n<h3 id=\"화살표-함수arrow-function-es6\"><a href=\"#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98arrow-function-es6\" aria-label=\"화살표 함수arrow function es6 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>화살표 함수(Arrow Function): ES6</h3>\n<ul>\n<li>prototype 프로퍼티가 없으며 arguments 객체를 생성하지 않는다.</li>\n<li>함수 자체의 this, arguments, super, new.target 바인딩을 갖지 않는다.</li>\n<li>화살표 함수 내부에서 this, arguments, super, new.target를 참조하면 스코프 체인을 통해 상위 컨텍스트의 this, arguments, super, new.target를 참조한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"함수-호출\"><a href=\"#%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\" aria-label=\"함수 호출 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 호출</h2>\n<ul>\n<li>함수호출문은 표현식이다. 이유는 리턴 받은 값을 변수에 담아서 표현을 하고, 변수에 담을 수 있다는 것은 값이라는 것이다. 한마디로 함수호출문은 표현식이면서 값이다.</li>\n<li>함수 내부에 선언한 변수(매개변수 포함)는 함수가 <strong>호출</strong>되면 함수에 있는 문들이 한줄 한줄 실행되기 이전에 선언된다.</li>\n</ul>\n<br>\n<br>\n<h2 id=\"인수argument와-매개변수parameter\"><a href=\"#%EC%9D%B8%EC%88%98argument%EC%99%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98parameter\" aria-label=\"인수argument와 매개변수parameter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인수(argument)와 매개변수(parameter)</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1+ y(undefined) = NaN</span>\n<span class=\"token comment\">// 매개변수는 호출할때 변수 선언이 된다.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\n<span class=\"token comment\">// 함수 객체는 argument라는 객체를 가지고 있어 맨 마지막은 버려지지 않고 가지고 있다.</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add3</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span>\n<span class=\"token comment\">// 동일한 매개변수 명을 가지게 되면 마지막 위치에 있는 인수의 값으로 할당된다.</span></code></pre></div>\n<p>위 코드는 자바스크립트 문법상 어떠한 문제도 없으므로 자바스크립트 엔진은 아무런 이의 제기 없이 위 코드를 실행할 것이다. 이러한 상황이 발생하는 이유는</p>\n<ul>\n<li>자바스크립트 함수는 매개변수와 인수의 개수가 일치하는지 확인하지 않는다.</li>\n<li>자바스크립트는 동적 타입 언어이다. 따라서 자바스크립트 함수는 매개변수의 타입을 사전에 지정하지 않는다.</li>\n</ul>\n<p>따라서 자바스크립트 함수는 아래와 같은 코드로 적절한 인수가 전달되었는지 확인이 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> y <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'매개변수에 숫자 타입이 아닌 값이 할당되었습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// TypeError: 매개변수에 숫자 타입이 아닌 값이 할당되었습니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: 매개변수에 숫자 타입이 아닌 값이 할당되었습니다.</span>\n\n<span class=\"token comment\">// 이런 배보다 배꼽이 더 큰 현상이 일어나 요즘에 타입스크립트를 쓰는 추세이다.</span></code></pre></div>\n<hr class=\"sub\" />\n<h3 id=\"매개변수parameter의-개수\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98parameter%EC%9D%98-%EA%B0%9C%EC%88%98\" aria-label=\"매개변수parameter의 개수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수(parameter)의 개수</h3>\n<p>매개변수(parameter)는 순서에도 의미가 있다.<br>\n매개변수(parameter)는 0개 이상을 갖고 2개 이상일때 (,)로 구분한다. 매개변수의 이상적인 개수는 0개이다. 매개변수가 많으면 많을수록 호출시 순서를 신경을 많이 써야되는 불편함이 있다. 보통 4개 이상이면 보통 객체(자료 구조)로 넘겨준다.</p>\n<p>예를들어 ajax 와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token punctuation\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Lee'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  cache<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 하나의 객체로 넘긴다.</span>\n<span class=\"token comment\">// 만약 4개의 값을 넘기려면 하나 하나마다 순서를 맞춰 줘야된다.</span>\n<span class=\"token comment\">// 이렇게되면 argument처럼 입력 순서에 제약을 받지 않는다.</span>\n<span class=\"token comment\">// 객체의 property 순서는 상관없고, property의 key가 중요하기 때문에 입력 순서와는 상관 없어져서 편의해진다.</span>\n<span class=\"token comment\">// 객체를 변수를 묶지 않고, 한번에 argument로 넘기는 이유는 만약 변수로 담게되면 어느 순간 다른 값에 참조에 의한 전달로 인해 수정될 위험성이 있기 때문이다.</span></code></pre></div>\n<hr class=\"sub\" />\n<h3 id=\"매개변수-기본값\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EA%B8%B0%EB%B3%B8%EA%B0%92\" aria-label=\"매개변수 기본값 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수 기본값</h3>\n<p>함수를 호출할 때 매개변수의 개수만큼 인수를 전달하는 것이 일반적이지만 그렇지 않은 경우에도 에러가 발생하지는 않는다. 함수는 매개변수의 개수와 인수의 개수를 체크하지 않는다. 인수가 부족한 경우, 매개변수의 값은 undefined이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 + undefined</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<p>매개변수에 적절한 인수가 전달되었는지 함수 내부에서 확인할 필요가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 매개변수의 값이 falsy value인 경우, 기본값을 할당한다.</span>\n  x <span class=\"token operator\">=</span> x <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  y <span class=\"token operator\">=</span> y <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>ES6에서는 매개변수 기본값을 사용하여 함수 내에서 수행하던 인수 체크 및 초기화를 간소화할 수 있다. 매개변수 기본값은 매개변수에 인수를 전달하지 않았을 경우에만 유효하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>매개변수 기본값은 함수 정의 시 선언한 매개변수 개수를 나타내는 함수 객체의 length 프로퍼티와 arguments 객체에 영향을 주지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">매개변수 기본값은 함수 정의 시 선언한 매개변수 개수를 나타내는 함수 객체의 length 프로퍼티와 arguments 객체에 영향을 주지 않는다<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Arguments { '0': 1 }</span>\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Arguments { '0': 1, '1': 2 }</span></code></pre></div>\n<br>\n<h2 id=\"외부-상태의-변경과-함수형-프로그래밍\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%83%81%ED%83%9C%EC%9D%98-%EB%B3%80%EA%B2%BD%EA%B3%BC-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"외부 상태의 변경과 함수형 프로그래밍 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 상태의 변경과 함수형 프로그래밍</h2>\n<p>argument에서 parameter로 넘길때도</p>\n<ul>\n<li>변수 할당처럼 값에 의한 전달(pass by value)과 참조에 의한 전달(call by value)은 같은 개념이다.</li>\n<li>객체 또한 같이 참조 값을 넘겨준다. 그래서 객체의 변화에 추적이 어렵다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeVal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">primitive<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  primitive <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  obj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Kim'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 외부 상태</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Lee'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {name: \"Lee\"}</span>\n\n<span class=\"token comment\">// 원시값은 값 자체가 복사되어 전달되고 객체는 참조값이 복사되어 전달된다.</span>\n<span class=\"token function\">changeVal</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 원시 값은 원본이 훼손되지 않는다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// 객체는 원본이 훼손된다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {name: \"Kim\"}</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"반환문\"><a href=\"#%EB%B0%98%ED%99%98%EB%AC%B8\" aria-label=\"반환문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반환문</h2>\n<ul>\n<li>말 그대로 값을 반환하며 함수를 종료 시킨다.</li>\n<li><b>함수 몸체 내부에서만</b> 사용할 수 있다.</li>\n<li>return 문이 없으면 암묵적으로 <strong>undefined</strong> 로 반환한다.</li>\n<li>return문은 필수가 아니다.</li>\n</ul>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값의 반환</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 함수는 반환값으로 평가된다.</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span></code></pre></div>\n<p>return문 뒤에 문은 실행되지 않는다.</p>\n<br>\n<p><strong><em>리턴문 뒤에 개행을 했을 경우</em></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// return 키워드와 반환값 사이에 줄바꿈이 있으면</span>\n  <span class=\"token keyword\">return</span> <span class=\"token comment\">// 개행이 이루어지면 자바스크립트 엔진은 세미콜론 자동 삽입 기능(ASI)에 의해 세미콜론이 추가된다.</span>\n  x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 무시된다.</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"즉시실행함수iife★\"><a href=\"#%EC%A6%89%EC%8B%9C%EC%8B%A4%ED%96%89%ED%95%A8%EC%88%98iife%E2%98%85\" aria-label=\"즉시실행함수iife★ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>즉시실행함수(IIFE)★</h2>\n<ul>\n<li>함수를 정의하면서 바로 호출한다.</li>\n<li>일회성 함수이다.</li>\n<li>많이 쓰인다.</li>\n<li>클로저와 같이 쓰인다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 익명 즉시 실행 함수</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>함수 리터럴로 평가되기 위해 그룹 연산자로 묶어주었다.</li>\n<li>맨뒤에 ()는 함수 리터럴을 바로 호출하는 걸 의미한다.</li>\n<li>function 안에 변수가 되기 때문에 전역변수를 지역변수로 바꿀 수 있다.</li>\n</ul>\n<p><em>함수 선언문이 아닌 함수 리터럴로 평가되기 위한 방법</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 가장 일반적인 방식</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">!</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">+</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"재귀-함수\"><a href=\"#%EC%9E%AC%EA%B7%80-%ED%95%A8%EC%88%98\" aria-label=\"재귀 함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재귀 함수</h2>\n<ul>\n<li>자기 자신을 호출하는 함수이다.</li>\n<li>탈출 조건을 주지 않으면 무한 루프가 된다.</li>\n<li>일반적인 재귀함수는 for문이나 while문으로 대처할 수 있는 가능성이 있다.</li>\n<li>중첩관계에 있는 뎁스를 딥 카피할때 사용</li>\n<li>알고리즘 풀이에 많이 사용된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 팩토리얼(계승)은 1부터 자신까지의 모든 양의 정수의 곱이다.</span>\n<span class=\"token comment\">// n! = 1 * 2 * ... * (n-1) * n</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 탈출 조건: n이 1 이하일 때 재귀 호출을 멈춘다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0! = 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1! = 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2! = 1 * 2 = 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3! = 1 * 2 * 3 = 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4! = 1 * 2 * 3 * 4 = 24</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5! = 1 * 2 * 3 * 4 * 5 = 120</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"중첩-함수nested-function★\"><a href=\"#%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98nested-function%E2%98%85\" aria-label=\"중첩 함수nested function★ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩 함수(nested function)★</h2>\n<p>함수에도 상하위 관계(중첩 또는 외부관계)가 있다.\n일반적으로 중첩 함수는 자신을 포함하는 외부 함수(outer function)을 돕는 헬퍼 함수(helper function)의 역할을 한다. 자신을 포함하고 있는 외부 함수의 밖에서는 중첩 함수를 호출할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 중첩 함수(외부에서 호출 못하니까 부품이라 생각하면 편하다.)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 외부 함수의 변수를 참조할 수 있다.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 중첩 함수의 변수를 참조할 수 없다.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: y is not defined</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<br>\n<h2 id=\"콜백함수★\"><a href=\"#%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%E2%98%85\" aria-label=\"콜백함수★ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백함수★</h2>\n<ul>\n<li>나중에 호출되는 것을 의미한다.</li>\n<li>콜백함수를 Argument로 전달 받는 고차 함수가 호출한다.</li>\n</ul>\n<p>콜백 함수가 콜백 함수를 전달받는 함수 내부에만 호출된다면 콜백 함수를 익명 함수 리터럴로 정의하면서 인수로 곧바로 전달하는 것이 일반적이다. 이때 콜백 함수로서 전달된 함수 리터럴은 콜백 함수를 전달받은 함수가 호출될 때 평가되어 생성된다.</p>\n<p>중첩 함수가 외부 함수를 돕는 헬퍼 함수의 역할을 하는 것처럼 콜백 함수는 고차함수에 전달되어 헬퍼 함수의 역할을 한다.</p>\n<p>단, 중첩 함수는 고정되어 있어서 교체할 수 없지만 콜백 함수는 함수 외부에서 인수로 주입하기 때문에 자유롭게 교체할 수 있다는 장점이 있다. 한마디로 중첩함수와는 다르게 외부에서 바꿔서 껴주는 식, 콜백함수에 의해서 자신의 기능이 변한다.</p>\n<blockquote>\n<p>하나의 제품은 전달받는 고차 함수<br>\n무언가를 만드는 기계가 콜백 함수</p>\n</blockquote>\n<p><strong>콜백함수를 사용하지 않을 경우와 콜백함수를 사용했을 경우 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 콜백 함수를 사용하지 않으면 함수를 분리해야 한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printToUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">printToUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HELLO</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printToLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">printToLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello</span>\n\n\n<span class=\"token comment\">// 콜백 함수를 외부에서 전달하면 콜백 함수에 따라 다양한 동작을 하는 함수를 만들 수 있다.</span>\n<span class=\"token comment\">// 콜백 함수를 전달받는 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 미리 설계 되어 있어야된다.</span>\n  <span class=\"token comment\">// 콜백 함수를 전달받는 함수가 콜백 함수의 호출 시기를 결정하고 호출</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// print 함수에 콜백 함수를 전달하면서 호출</span>\n<span class=\"token keyword\">var</span> res1 <span class=\"token operator\">=</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// print 함수에 콜백 함수를 전달하면서 호출</span>\n<span class=\"token keyword\">var</span> res2 <span class=\"token operator\">=</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 다른 곳에서 안쓰려고(일회성) 사용하기 위해 print(function 자체를 넣은 것이다)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HELLO hello</span></code></pre></div>\n<p>콜백 함수는 비동기 처리를 위해 사용하는 일반적인 패턴이다.</p>\n<p>주로 이벤트 처리나 Ajax 통신에 많이 이용된다.</p>\n<p>또, 고차 함수(Higher-order Function)에서도 사용하는 패턴으로 사용 빈도가 매우 높고 중요한 패턴이다.</p>\n<p><strong>배열의 고차함수에서의 콜백함수 사용예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 콜백 함수를 사용하는 고차 함수 map</span>\n<span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 2, 4, 6 ]</span>\n\n<span class=\"token comment\">// 콜백 함수를 사용하는 고차 함수 filter</span>\nres <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 1, 3 ]</span></code></pre></div>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<div class=\"reference-site\">\n<p>  <strong>Reference</strong><br></p>\n<p>  <a href=\"https://poiemaweb.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://poiemaweb.com</a></p>\n</div>","fields":{"slug":"/posts/javascript/Function","tagSlugs":["/tag/function/"]},"frontmatter":{"date":"2019-10-13","description":"함수에 대해서 알아보자","tags":["Function"],"title":"Function","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript/Function"}}}