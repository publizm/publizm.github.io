{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript/dynamicTyping","webpackCompilationHash":"c3f7772db44e9b97ddde","result":{"data":{"markdownRemark":{"id":"fb72bc17-d6a5-5646-978d-189956e5c906","html":"<span class=\"notice\">\n  <em>TIL 내용이므로 잘못된 내용은 댓글 부탁드립니다</em>\n</span>\n<div id=\"toc\">\n<p><strong><img class=\"emoji-icon\" alt=\"emoji-link\" data-icon=\"emoji-link\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAABGdBTUEAAYagMeiWXwAAAAJiS0dEAP+Hj8y/AAAAB3RJTUUH4QsFFwYZepoZFwAAA21JREFUOMt1lFtsFHUUxr//zHYue213obFbamutloDaxSigISQYkFrjNSSI9EJ9IWqjkZhoUkVJGhdZO5pGm9IK4QHhQTRIFXwgxqSaWLykamAV02btZaft7navc9vZmb8PKFa6nofz9Ptycr5zIfif+BMcE23Q79SrkSK/uqYqrG0AAFIePw3ep+zXus0Ghrd1Msmfcn5oJ/YCYMvhI6D+uJQ84PCsvhwcZ5Xc2uSDmbqFse1qrJxgGLxflvL7hDn60uLBn04rn9hXrZbMFi0T/uaJlYIhiP64pHSJ00s9b34saietonbil8Y0adNr15+z8+yNOOeXJbVLiC319H++EV8DmEEb0jK3E7ep5+1px3L8AH5zed+2O2HGT23+jpJJ2gQAsJDPBVI8V3QRMP/i3VA8xsu5do1ccTDPpT478cyE5yQAIIjbA0ItDGNJw/UKR+D2/xgpdhB2Pto40xxU75ltYdaZhw7leDxJhnYb67TvlamKf5o+Cr9/VprdR1l7IbnbN2B9as1bGzP3a7Gqic3kq6eNPoFR+x79NnpNMASnPy7lOpUMZUjeGMwlErlL46JFHtIC8qj+eP490YfIlUG5dBYscBS8X5aULn460cs2CHXiRdekAxzNyuzDtH5BIK9UViISC9foxwGwryLjVvr1bnEm2zNyJtTs2Sr4GsYc+QJMq+Ixuja2Kci7I1fDbm0QAMDuRK7D6OXns89Lox3UlKu3iluE9bcWmpj4XfxeszJZcr9DDkMb/tsc0u7lzwrb1BePD2yCFxfJC631b7EtRWM6nRQCVXJ+or82UlTHr5vv0OuZptKc/EUbLgF4hA58+Vqsrt16AKEaQVAWe6eGsmZq2XAZw22LlsKo1/wdBSiNzh0sfOS1q4pEmh/e9R8cYEqLWOIDN928Cs8CAD7ABsb7lPm64LAik4ebjTM3LCdbqa4Oee4TmTvGbP0cNuBu5uc96Xd5H41MhH3qsRXLz263SvlAq/NeUt+YShDhluj+xBucl0b+CAfUkTLHRXYhyu7oXNPH1tAskyJeexVbUPp/P+LW3i97vAQcOMHduiO0Z03I6TFNOf7DhfMXVB0ENiyYMKBDhYYiTNiwCTg44YLI+5qrg540vawUTDAgoLBRQhE6VChQoMGEBZss+x0UAFnxR+iyDOAv/Ud+TW3GONMAAAAldEVYdGRhdGU6Y3JlYXRlADIwMTctMTEtMDVUMTg6NDk6NTArMDA6MDAUXGOwAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDE3LTExLTA1VDEzOjUzOjQ4KzAwOjAwqyFlXwAAAABJRU5ErkJggg==\" title=\"emoji-link\">  Table Of Contents</strong></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EC%A0%81-%ED%83%80%EC%9E%85-%EC%96%B8%EC%96%B4staticstrong-type\">정적 타입 언어(Static/Strong type)</a></li>\n<li><a href=\"#%EB%8F%99%EC%A0%81-%ED%83%80%EC%9E%85-%EC%96%B8%EC%96%B4\">동적 타입 언어</a></li>\n</ul>\n</div>\n<h2 id=\"정적-타입-언어staticstrong-type\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%83%80%EC%9E%85-%EC%96%B8%EC%96%B4staticstrong-type\" aria-label=\"정적 타입 언어staticstrong type permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 타입 언어(Static/Strong type)</h2>\n<p>정적 타입 언어는 <em><a href=\"/posts/javascript/variable\">변수</a>를 선언할때 변수에 할당할 수 있는 값의 종류, 즉 데이터 타입을 사전에 선언해야한다.</em> 이를 명시적 타입 선언이라 한다.</p>\n<p>C에서 정수 타입의 변수를 선언하는 예시이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// 변수 c에는 1byte 정수 타입의 값(-128 ~ 127)만을 할당할 수 있다.</span>\n<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 변수 num에는 4byte 정수 타입의 값(-2,124,483,648 ~ 2,124,483,647)만을 할당할 수 있다.</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong><em>정적 타입 언어는 변수의 타입을 변경할 수 없으며 변수에 선언한 타입에 맞는 값만을 할당할 수 있다.</em></strong><br>\n정적 타입 언어는 컴파일 시점에 타입 체크(선언한 데이터 타입에 맞는 값을 할당했는지 여부)를 수행한다. 만약 타입 체크를 통과하지 못했다면 에러를 발생시키고 프로그램의 실행 자체를 막는다. 이를 통해 타입의 일관성을 강제하여 보다 안정적인 코드의 구현을 통해 런타임에 발생하는 에러를 줄인다.</p>\n<blockquote>\n<p>대표적인 정적 타입 언어는<br>\nC, C++, Java, Kotlin, Go, Haskell, Rust, Scala 등이 있다.</p>\n</blockquote>\n<h2 id=\"동적-타입-언어\"><a href=\"#%EB%8F%99%EC%A0%81-%ED%83%80%EC%9E%85-%EC%96%B8%EC%96%B4\" aria-label=\"동적 타입 언어 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 타입 언어</h2>\n<p>변수를 선언할때 데이터 타입을 선언하지 않는다. 다만 var, let, const 키워드를 사용해 변수를 선언할 뿐이다. 자바스크립트의 변수는 정적타입 언어와 같이 미리 선언한 데이터 타입의 값만을 할당할 수 있는 것이 아니다. 어떠한 <em>데이터 타입의 값이라도 자유롭게 할당할 수 있다.</em></p>\n<p><em>typeof 연산자를 이용하여 확인해보자</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// boolean</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// object</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// symbol</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// object</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// object = 배열도 객체이다.</span>\n\n<span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// function</span></code></pre></div>\n<p>위에서 볼 수 잇듯이 변수의 데이터 타입을 반환하는 것이 아니라 변수에 <strong>할당된 값의 데이터 타입을 반환하는 것이다.</strong></p>\n<p><strong><em>자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정된다. 그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다.</em></strong><br></p>\n<p>이러한 특징을 <strong>동적 타이핑(Dynamic typing)</strong>이라 하며 자바스크립트를 정적 타입 언어와 구별하기 위해 동적타입 언어(Dynamic/Weak type)언어라 부른다.</p>\n<blockquote>\n<p>대표적인 동적타입 언어는<br>\nJavascript, Python, PHP, Ruby, Lisp, Perl 등이 있다.</p>\n</blockquote>\n<br>\n<br>\n<br>\n<br>","fields":{"slug":"/posts/javascript/dynamicTyping","tagSlugs":["/tag/dynamic-typing/","/tag/static-type/","/tag/dynamic-type/"]},"frontmatter":{"date":"2019-10-13","description":"동적 타입 언어와 정적 타입 언어에 대해 알아보자","tags":["dynamicTyping","Static type","Dynamic type"],"title":"동적 타이핑(dynamicTyping)","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript/dynamicTyping"}}}