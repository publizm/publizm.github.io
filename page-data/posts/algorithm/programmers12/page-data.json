{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/algorithm/programmers12","webpackCompilationHash":"b4eb599d49bc5f245fd0","result":{"data":{"markdownRemark":{"id":"92407870-bb22-5c00-9ea0-e5831685c872","html":"<span class=\"notice\">\n  <em>좀 더 좋은 방법이 있다면 댓글로 공유 부탁드립니다.</em>\n</span>\n<h2 id=\"시저-암호\"><a href=\"#%EC%8B%9C%EC%A0%80-%EC%95%94%ED%98%B8\" aria-label=\"시저 암호 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시저 암호</h2>\n<p>어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다.<br>\n예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다. z는 1만큼 밀면 a가 됩니다.<br>\n문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.</p>\n<br>\n<h3 id=\"제한사항\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한사항</h3>\n<ul>\n<li>공백은 아무리 밀어도 공백입니다.</li>\n<li>s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.</li>\n<li>s의 길이는 8000이하입니다.</li>\n<li>n은 1 이상, 25이하인 자연수입니다.</li>\n</ul>\n<hr class=\"sub\" />\n<h3 id=\"입출력-예\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\" aria-label=\"입출력 예 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예</h3>\n<article class=\"board-tbl\">\n<table>\n<thead>\n<tr>\n<th>s</th>\n<th>n</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AB</td>\n<td>1</td>\n<td>BC</td>\n</tr>\n<tr>\n<td>z</td>\n<td>1</td>\n<td>a</td>\n</tr>\n<tr>\n<td>a B z</td>\n<td>4</td>\n<td>e F d</td>\n</tr>\n</tbody>\n</table>\n</article>\n<hr class=\"sub\" />\n<h3 id=\"풀이\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 정답</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> code <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> code <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 대문자</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> code <span class=\"token operator\">&lt;=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">></span> <span class=\"token number\">90</span> <span class=\"token operator\">?</span> result <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span> <span class=\"token operator\">+</span> sum <span class=\"token operator\">-</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> result <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 소문자</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">>=</span> <span class=\"token number\">97</span> <span class=\"token operator\">&amp;&amp;</span> code <span class=\"token operator\">&lt;=</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">></span> <span class=\"token number\">122</span> <span class=\"token operator\">?</span> result <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">96</span> <span class=\"token operator\">+</span> sum <span class=\"token operator\">-</span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> result <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 유니코드에 대한 내장함수를 이용하여 for문 풀이 - 예제 3개는 성공, 나머지 테스트 케이스 실패</span>\n<span class=\"token comment\">// for (let word of s) {</span>\n<span class=\"token comment\">//     if (word === ' ') {</span>\n<span class=\"token comment\">//         result += ' ';</span>\n<span class=\"token comment\">//         continue;</span>\n<span class=\"token comment\">//     }</span>\n\n<span class=\"token comment\">//     let code = word.charCodeAt();</span>\n\n<span class=\"token comment\">//     if (code === 90 || code === 122) {</span>\n<span class=\"token comment\">//         if (word.charCodeAt() === 90) code = 65 - 1;</span>\n<span class=\"token comment\">//         if (word.charCodeAt() === 122) code = 97 - 1;</span>\n<span class=\"token comment\">//     }</span>\n<span class=\"token comment\">//     result += String.fromCharCode(code + n);</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// return result;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>초반에 접근을 너무 단순하게 하였다. z 다음에 a가 온다라고만 접근하여, z만 처리했다.\n거기에 포커스가 잡혀있는 상태에서 코드작업을 진행하였는데 결과론적으론 첫 예제에 있는 테스트는 성공했지만, 이후 여러 테스트케이스에서는 실패가 나왔다</p>\n<p>이유를 곰곰히 생각해보니 만약 y가 있고 n의 값이 4일 경우 y는 c로 교체되야된다. 이 부분을 놓쳤다.</p>\n<p>너무 단순하게 생각하여 접근하지말고, 앞으론 다양한 경우의 수를 생각한 다음 접근해야겠다.</p>\n<br>\n<br>\n<br>\n<br>\n<br>","fields":{"slug":"/posts/algorithm/programmers12","tagSlugs":["/tag/algorithm/"]},"frontmatter":{"date":"2019-12-11","description":"알고리즘 연습하기","tags":["algorithm"],"title":"시저 암호(프로그래머스)","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/algorithm/programmers12"}}}